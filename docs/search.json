[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "心理学統計演習",
    "section": "",
    "text": "1 はじめに\nこの資料は，授業「心理学統計演習」についてのものです。 演習という授業名にあるように，理論的な解説で「理解して進む」ことよりも，「手を動かして理解する」ことを目的にしています。\nこの資料を活用する人は，理論的な(いわゆる座学の)心理学統計を履修済みであることを前提にしています。また，資料集という位置付けですので，行間の説明が省略されていることが多くあります。その点は講義時間中の講話で補完していくつもりですので，不明な点があれば授業時間中に質問してください。\n\n\n2 ライセンス等\nこの資料はCreative Commons BY-SA(CC BY-SA)ライセンスVersion 4.0に基づいて提供されています。 著者に適切なクレジットを与える限り，この本を再利用，再編集，保持，改訂，再頒布(商用利用を含む)をすることができます。 もし再編集したり，このオープンなテキストを変更したい場合，すべてのバージョンにわたってこれと同じライセンス，CC BY-SA を適用しなければなりません。\nThis article is published under a Creative Commons BY-SA license (CC BY-SA) version 4.0. This means that this book can be reused, remixed, retained, revised and redistributed (including commercially) as long as appropriate credit is given to the authors. If you remix, or modify the original version of this open textbook, you must redistribute all versions of this open textbook under the same license - CC BY-SA."
  },
  {
    "objectID": "chapter01.html#環境の準備",
    "href": "chapter01.html#環境の準備",
    "title": "2  はじめようR/RStudio",
    "section": "2.1 環境の準備",
    "text": "2.1 環境の準備\n\n2.1.1 Rのインストール\nRのインストールに関して，初心者でも利用可能な資料がオンラインで公開されている。\nRはThe Comprehensive R Archive Network，通称CRAN2というネットワークで公開されている。CRANのトップページにはダウンロードリンクが用意されており，自分のプラットフォームにあった最新版をダウンロードしよう3。\n\n\n2.1.2 RStudioのインストール\nRのインストールが終われば，次はRStudioをインストールしよう。 RStudioは総合開発環境(IDE)と呼ばれるものである。Rは単体で，統計の分析や関数の描画など，専門的な利用に耐えうる分析機能を有している。その本質はもちろん計算機能であって，計算を実行する命令文(スクリプト)を与えれば，必要な返答をあたえてくれる。このように分析の本質が計算機能であったとしても，実際の分析活動に際しては，スクリプトの下書きと清書，入出力データや描画ファイルの生成・管理，パッケージ(後述)の管理など，分析にまつわるさまざまな周辺活動が含まれる。喩えるなら料理の本質が包丁・まな板・コンロによる加工であったとしても，実際の調理に際しては，広い調理スペースや使いやすいシンク，ボウルやタッパーなどの補助的な調理器具があった方がスムーズにことが進む。 いわば，R単体で分析をするのは飯盒炊爨のような必要最低限かつワイルドな調理法であり，RStudioは総合的な調理環境を提供してくれるものなのである。\n繰り返しになるが，本質的にはR単体で作業が可能である。なるべく単純な環境を維持したいというのであればR単体での利用を否定するものではないが，RStudioはエディタや文書作成ソフトとしても有用であるので，本授業ではRStudioを使うことを前提とする4。\n\n\n2.1.3 環境の準備に関する導入サイト\n以下に執筆時点(2024年1月)で参照可能な，導入に関するWeb教材を挙げておく。自分に合ったものを適宜参照し，RとRStudioを自身のPC環境に導入してほしい。もちろん自身で「R RStudio インストール」などとして検索しても良いし，chatGPTに相談しても良い。\n\n2.1.3.1 For Windows\n\n東京大学・大学院農学生命科学研究科アグリバイオインフォマティクス教育研究プログラムによるPDF資料\n初心者向けRのインストールガイド\n関西学院大学商学部土方ゼミ資料\n多摩大学情報社会研究所・応用統計学室資料\n奥村 晴彦先生のページ\n\n\n\n2.1.3.2 For Macintosh\n\n東京大学・大学院農学生命科学研究科アグリバイオインフォマティクス教育研究プログラムによるPDF資料\nnoteの記事\nいちばんやさしい，医療統計記事\n\nなお，Macの場合はHomebrewなどのパッケージ管理ソフトを使って導入することもできる(し，そのほうがいい)。その場合は以下の資料を参照。\n\n群馬大学大学院医学系研究科機能形態学の記事\nコアラさばお氏のnote記事\nRyu Takahashi氏のQiita記事\nYuhki Yano氏のQiita記事"
  },
  {
    "objectID": "chapter01.html#rstudioの基礎４つのペイン",
    "href": "chapter01.html#rstudioの基礎４つのペイン",
    "title": "2  はじめようR/RStudio",
    "section": "2.2 RStudioの基礎（４つのペイン）",
    "text": "2.2 RStudioの基礎（４つのペイン）\nここまでで，RおよびRStudioを利用する準備が整っているものとする。\nさて，RStudioを起動すると大きくわけて4つの領域に分かれた画面が出てくる。この領域のことをペインと呼ぶ。図中の「領域1」がないように見えるときもあるが，下のペインが最大化され折りたたまれているだけなので，ペイン上部のサイズ変更ボタンを操作することで出てくるだろう。\n\n\n\nRStudioの初期画面\n\n\nこのペインのレイアウトは，メニューのTools &gt; Global Options… &gt; Pane Layoutから変更することもできる。基本的に4分割であることに変わりはないが，自分が利用しやすい位置にレイアウトを変更するとよい。\n\n\n\nレイアウト変更画面。このほかにも背景色などを変えることもできる\n\n\n以下，各ペイン(領域)が何をするところかを簡単に解説する。\n\n2.2.1 領域1；エディタ・ペイン\nエディタ領域。Rのスクリプトはもちろん，レポートの文章など，基本的に入力するときはこのペインに書く。ここで作業するファイルの種類は，File &gt; New Fileから見ると明らかなように，R言語だけでなくC言語，Python言語などのスクリプトや，Rmd，md,Qmd,HTMLなどのマークアップ言語，StanやSQLなど特殊な言語などにも対応している。ペインの右下に現在開かれているファイルの種類が表示されているのを確認しておこう。\nR言語でスクリプトを書く例で解説しよう。Rは命令を逐次実行していくインタプリタ形式であり，ここに記述されたRコードを，右上のRunボタンでコンソールに送って計算を実行するように使う。一回の命令をコマンド，コマンドが積み重ねられた全体をスクリプト，あるいはプログラムと呼ぶ。複数のコマンドを実行したい場合は，エディタ領域で複数行選択してRunボタンを，スクリプトファイル全体を実行したいときはRunボタンのとなりにあるSourceを押す。CTRL+Enter(Macの場合はコマンド+Enter)でRunボタンのショートカットになる。\n\n\n2.2.2 領域2；コンソール・ペイン\nR単体で利用する場合は，ここのペインだけを利用するようなものである。すなわち，ここに示されているのがR本体というか，Rの計算機能そのものである。ここに「＞」の記号が表示されているところをプロンプトといい，プロンプトが表示されているときはRが入力待ちの状態である。\nRは逐次的に計算を行うので，プロンプトのある状態でコマンドを入力すると計算結果が返される。 ここに直接コマンドを書いて行っても良いが，書き間違えたりすることもあるし，コマンドが複数行に渡ることが一般的になってくるので，エディタ領域に清書するつもりで記述していったほうがよい。ごくたまに，一時的に確認したいことがある時だけ，直接コンソールを触るようにすると良い。\nなお，コンソールを綺麗にしたいときは右上の箒ボタンをおすとよい。\n\n\n2.2.3 領域3；環境ペイン\n基本的にこのペインと次の領域4のペインは複数のタブが含まれる。Pane Layoutでどちらにどのタブを含めるかを自分好みにカスタマイズすることもできる。ここでは代表的な2つのタブについてのみ言及する。\nEnvironmentタブは，Rの実行メモリ内に保管されている変数や関数などが表示されている。「変数や関数など」をまとめてオブジェクトというが，ここで内容や構造をGUIで確認することができる。\nHistoryタブは履歴である。これまでコンソールに送られてきたコマンドが順に記録されている。Historyタブからエディタ，コンソールにコマンドを送ることも可能であり，「さっきの命令をもう一度実行したい」といったときに参照すると良い。\n\n\n2.2.4 領域4；ファイルペイン\nここでも代表的なタブについてのみ解説する。\nFilesタブはMacでいうFinder，Windowsでいうエクスプローラーのような，ファイル操作画面である。フォルダの作成，ファイルの削除，リネーム，コピーなどの操作が可能である。\nPlotタブはRコマンドで描画命令が出された時の結果がここに表示される。RStudioの利点の一つは，このPlotから図をファイルにExportすることが可能であり，その際にファイルサイズやファイル形式を指定できるところにある。\nPackagesタブは読み込まれているパッケージ，(読み込まれていないが)保管しているパッケージのリストが表示されている。新しくパッケージを導入するときも，ここのinstallボタンから可能であり，保管しているパッケージのアップデートもボタンひとつで可能である。なお，パッケージについては後ほど言及する。\nHelpタブはRコマンドでヘルプを表示する命令(help関数)が実行された時の結果が表示される領域である。ヘルプを使うことで関数の引数，戻り値，使用例などを参照できる。\n\n\n2.2.5 そのほかのタブ\nそのほか，表示の有無もオプションになっているようないくつかのタブについて，簡単に解説しておく。\nConnectionsタブはRを外部データベースなどに繋げるときに参照する。大規模データをローカルにすべて取り込むことなく，SQLで必要なテーブルだけ取り出すといった操作をする際は必要になってくるだろう。\nGitタブはR，とくにRプロジェクト(後述)のバージョンを管理するときに利用する。Gitとは複数のプログラマによって同時並行的にプログラムを作っていく時の管理システムである。時系列的な差分の記録を得意とするシステムなので，レポートの作成時などに応用すればラボノートの記録としても利用できる。\nBuildタブはRパッケージやWebサイトを構築するときに利用する。なおこの資料もRStudioを利用して作られており，資料を生成(原稿からHTMLやPDFにする)ときにはこのタブを利用している。\nTutorialタブはチュートリアルツアーを楽しむ時のタブである。\nViewerタブはRStudioで作られたHTMLやPDFなどを見るためのタブである。\nPresentationタブはRStudioで作られたプレゼンテーションを見るためのタブである。\nTerminalタブはWindows/MacでいうTerminal，Linuxでいう端末についてのタブであり，Rに限らず，コマンドラインを通じてOSに命令するときに使う。\nBackground Jobsタブはその名の通りバックグラウンドで作業をさせるときに利用する。Rは基本的にシングルコアで計算が実行されるが，このタブを使ってスクリプトファイルをバックグラウンドで実行することで並列的に作業が可能になる。"
  },
  {
    "objectID": "chapter01.html#rのパッケージ",
    "href": "chapter01.html#rのパッケージ",
    "title": "2  はじめようR/RStudio",
    "section": "2.3 Rのパッケージ",
    "text": "2.3 Rのパッケージ\nRは単体でも線型モデルなどの基本的な分析は可能であるが，より進んだ統計モデルを利用したい場合は専門のパッケージを導入することになる。パッケージとは関数群のことであり，これもCRANやGithubなどインターネットを介して提供されている。ちなみに提供されているパッケージは，CRANで公開されているものだけで344,607件あり5，Github6で公開されているものなど，CRANを介さないパッケージも少なくない。\nパッケージを利用する際は，まずローカルにパッケージファイルをインストールしなければならない。その上で，Rを起動するごとに(セッションごとに)，関数libraryでパッケージを呼び出して利用する。インストールを毎回行う必要はないことに注意。\nインストールはRのコマンドでも可能だが，RStudioのPackagesペインを使って導入するのが簡単だろう。以下に，一部の有名かつ有用なパッケージ名とその簡単な説明を挙げる。本講義の中で使うものもあるので，事前に準備しておくことが望ましい。\n\ntidyverseパッケージ(Wickham et al. 2019)；Rが飛躍的に使いやすくなったのは，このtidyverseパッケージ導入以後のことである。開発者のHadley WickhamはR業界で神と崇められており，R業界に与えたインパクトは大きい。このパッケージは「パッケージ群」「パッケージのパッケージ」であり，tidyverseとはtidyな(整然とした)verse(世界)というような意味合いである。このパッケージは統計分析モデルを提供するものではなく，その前のデータの前処理に関する便利な関数を提供する7。このパッケージをインストールすると，関連する依存パッケージが次々取り込まれるので，少々時間がかかる。\npsychパッケージ(Revelle 2021)；名前の通り，心理学統計に関する統計モデルの多くが含まれている。特に特殊な相関係数や，因子分析モデルなどは非常に便利なので，インストールしておいて間違いない。\nGPArotationパッケージ(Bernaards and Jennrich 2005)；因子分析における因子軸の回転に使うパッケージ。\nstylerパッケージ；スタイルを整えてくれるパッケージ。スクリプトの清書に便利。\nlavaanパッケージ(Rosseel 2012)；潜在変数を含んだモデル(LAtent VAriable ANalysis)の分析，要するに構造方程式モデリング(Structural Equation Modeling;SEM，共分散構造分析ともいう)を実行するパッケージ。\nctvパッケージ(Zeileis 2005); CRAN Task Viewsの略で，膨大に膨れ上がったCRANから必要なパッケージを見つけ出すのは困難であることから，ある程度のジャンルごとに関連しそうなパッケージをまとめて導入してくれるのがこのパッケージ。例えば，このパッケージをインストールした後で，install.views(\"Psychometrics\")とすると，心理統計関係の多くのパッケージを次々導入してくれる。\ncmdstanrパッケージ(Gabry, Češnovar, and Johnson 2023)；複雑な統計モデルで利用される，確率的プログラミング言語stanをRから使うことができるようになるパッケージ。導入にはこのパッケージの他にもstanやコンパイル環境の準備が必要なので，公式の導入サイトも参考にしてほしい。"
  },
  {
    "objectID": "chapter01.html#rstudioのプロジェクト",
    "href": "chapter01.html#rstudioのプロジェクト",
    "title": "2  はじめようR/RStudio",
    "section": "2.4 RStudioのプロジェクト",
    "text": "2.4 RStudioのプロジェクト\n実際にRを使っていく前に，最後の準備としてRStudioにおけるプロジェクトについて解説しておく。\nみなさんも，PCをつかって文書を作ったり保管したりするときに，フォルダにまとめて入れておくことがあるだろう。フォルダは例えば「文書」&gt;「心理学」&gt;「心理学統計演習」のように階層的に整理することが一般的で，そうしておくことで必要なファイルをすぐに取り出すことができる。\n逆に言えば，こうしたフォルダ管理をしておかなければファイルがPCのなかで散乱してしまい，必要な情報を得るために逐一PCの中身を検索しなければならないだろう。\nR/RStudioをつかった分析実践の場合も同様で，一回のテーマについて複数のファイル(スクリプトファイル，データファイル，画像ファイル，レポートなど文書ファイル等々)があり，シーンに合わせて(例えば「授業」「卒論」など)フォルダで管理することになる。\nさらに，PC環境には作業フォルダ(Working Directory)8という概念がある。たとえばR/RStudioを起動・実行しているときに，Rが「今どこで」実行されているか，どこを管理場所としているか，を表す概念である。例えばこの作業フォルダの中にsample.csvというファイルがあって，それをスクリプト上から読み込みたい，というコマンドを実行するのであれば，そのままファイル名を書けば良い。しかし別の場所にそのファイルが保存されているのなら，作業フォルダから見た相対的な位置を含めて指示してやるか(相対パス)，あるいはPC環境全体からみた絶対的な位置を含めて(絶対パス)指示してやる必要がある。相対・絶対パスの違いは，「ここから二つ目の角を右」のように指示するか，住所で指示するかの違いであると考えれば良い。\nともあれ，この作業フォルダがどこに設定されているかは，実行するときに常に気にしていなければならない。ちなみにこの作業フォルダは，RStudioのファイルペイン・Filesタブでひらいているところとは限らないことに注意してほしい。GUI上でエクスプローラ/Finderで開いたからといって，作業フォルダが自動的に切り替わるようにはなっていない。\nそこでRStudioのプロジェクトである。RStudioには「プロジェクト」という概念があり，作業フォルダや環境の設定などをそこで管理することができる。新しくプロジェクトを始めるときはFile&gt;New Project，すでに一度プロジェクトを作っているときはFile &gt; Open Projectとしてプロジェクトファイル(拡張子が.projのファイル)を開くようにする。そうすると，作業フォルダが当該フォルダに設定される。プロジェクトをGitに連携しておくとバージョン管理などもフォルダ単位で行える。\n以後，本講義で外部ファイルを参照する場合，プロジェクトフォルダの中にそのファイルがあるものとして(パスを必要としない形で)論じるので注意されたし。"
  },
  {
    "objectID": "chapter01.html#課題",
    "href": "chapter01.html#課題",
    "title": "2  はじめようR/RStudio",
    "section": "2.5 課題",
    "text": "2.5 課題\n\nRの最新版をCRANからダウンロードし，自分のPCにインストールしてください。\nRStudioのDesktop版をPosit社のサイトからダウンロードし，自分のPCにインストールしてください。\nRStidoを起動し，ペインレイアウトをデフォルトではない状態に並べ直してみてください。ソースペインを3列にするのも良いでしょう。\nコンソールペインに書かれている文字を全て消去してみてください。\nファイルペインにあるFilesタブをつかって，色々なフォルダを開けてみたり，不要なファイルを削除したり，ファイル名を変更したりしてみてください。\nファイルペインにあるFilesタブを開き，MoreのところからGo To Working Directoryを選択・実行してください。何か起こったでしょうか。\nこの授業のために，新しいプロジェクトを作成してください。プロジェクトは新しいフォルダでも，既存のフォルダでも構いません。\nプロジェクトが開いた状態のとき，RStudioのウィンドウ・タブのどこかに「プロジェクト名」が表示されているはずです。確認してください。\nまたファイルペインのFilesタブから，色々なファイル操作をした上で，改めてGo To Working Directoryをしてください。プロジェクトフォルダの中に戻ってこれたら成功です。\n新しいRスクリプトファイルを開き，空白のままで結構ですからファイル名をつけて保存してください。\nRStudioを終了あるいは最小化させ，OSのエクスプローラ/Finderから，プロジェクトフォルダに移動してください。先ほど作ったファイルが保存されていることを確認してください。\nプロジェクトフォルダには，プロジェクト名+.projというファイルが存在するはずです。これを開いて，RStudioのプロジェクトを開いてください。\nRStudioのFile &gt; Close Projectからプロジェクトを閉じてください。画面の細部でどこが変わったか，確認してください。\nRStudioを終了し，再びRStudioを起動してください。起動の方法はプロジェクトファイルからでも，アプリケーションの起動でも構いません。起動後に，プロジェクトを開いてください(あるいはプロジェクトが開かれていることを確認してください。)。\n\n\n\n\n\nBernaards, Coen A., and Robert I. Jennrich. 2005. “Gradient Projection Algorithms and Software for Arbitrary Rotation Criteria in Factor Analysis.” Educational and Psychological Measurement 65: 676–96. https://doi.org/10.1177/0013164404272507.\n\n\nGabry, Jonah, Rok Češnovar, and Andrew Johnson. 2023. Cmdstanr: R Interface to ’CmdStan’.\n\n\nRevelle, William. 2021. Psych: Procedures for Psychological, Psychometric, and Personality Research. Evanston, Illinois: Northwestern University. https://CRAN.R-project.org/package=psych.\n\n\nRosseel, Yves. 2012. “lavaan: An R Package for Structural Equation Modeling.” Journal of Statistical Software 48 (2): 1–36. https://doi.org/10.18637/jss.v048.i02.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nZeileis, Achim. 2005. “CRAN Task Views.” R News 5 (1): 39–40. https://CRAN.R-project.org/doc/Rnews/.\n\n\n松村優哉, 湯谷啓明, 紀ノ定保礼, and 前田和寛. 2021. 改訂2版 RユーザのためのRStudio[実践]入門〜tidyverseによるモダンな分析フローの世界. 技術評論社."
  },
  {
    "objectID": "chapter01.html#footnotes",
    "href": "chapter01.html#footnotes",
    "title": "2  はじめようR/RStudio",
    "section": "",
    "text": "2024年1月現在で，TokyoだけでなくFukuoka，Sapporo，Yamaguchi，Irumaなどで地方コミュニティがあり，参加者みんなで楽しまれている。↩︎\nCRANは「しーらん」，あるいは「くらん」と発音される。筆者はしーらん派。↩︎\nこの授業のために自身のPCにRをインストールしたとして，次に使うときに半年以上間隔が空いたのなら，改めて最新版をチェックし，バージョンが上がっていたら旧版をアンインストールして最新版をインストールするところから始めた方が良い。Rで利用するパッケージなどが新しい版にしか対応していないことなどもある。Rと畳は新しい方が良い。↩︎\nVSCodeのようなエディタから使うことも可能であるし，Jupyter Notebookの計算エンジンをRにすることも可能。最近では分析ソフトウェアを個々人で準備せず，環境として提供することも一般的になってきており，例えばGoogle ColaboratoryのエンジンをRにすることもできるようになっている。ローカルPCに自前の環境を作るということが，時代遅れになる日も近いかもしれない。↩︎\n2024年01月18日調べ↩︎\nGitはバージョン管理システムであるが，これをインターネット上のサーバ(レポジトリ)で行うものをGithubという。RStudioはGithubとも連携しており，プロジェクトをGithubと紐づけることで簡単にバージョン管理ができる。しかもここで言及しているように，Github上でパッケージを公開することもできるので，最近はCRANの校閲を待たずに公開できるGithubが好まれている側面もある。↩︎\n実は統計データの解析にかかる時間のほとんどが，解析に適切な形にデータを整形する「前処理」に費やされる。前処理，別名データハンドリングをいかに上手く，素早く，直感的にできるかは，その後の分析にも影響するほど重要な手順であるため，tidyverseパッケージの登場はありがたかった。これを使ったデータハンドリングだけの専門書(松村 et al. 2021)が重宝されるほどである。↩︎\nここでは，フォルダとディレクトリは同じ意味であると思ってもらって良い。一般に，CUIではディレクトリ，GUIではフォルダという用語が好まれる。語幹directにあるように，ファイルやアクセス先など具体的な指し示す先を強調しているのがディレクトリであり，それにファイル群などまとまった容れもの，という意味を付加したのがフォルダである。フォルダの方が言葉としてわかりやすいし。↩︎"
  },
  {
    "objectID": "chapter02.html#rで計算",
    "href": "chapter02.html#rで計算",
    "title": "3  Rの基礎",
    "section": "3.1 Rで計算",
    "text": "3.1 Rで計算\nまずはRを使った計算である。Rスクリプトファイルを開き，最初の行に次の4行を入力してみよう。 各行を実行(Runボタン，あるいはctrl+enter)し，コンソールの結果を確認しよう。\n\n1 + 2\n\n[1] 3\n\n2 - 3\n\n[1] -1\n\n3 * 4\n\n[1] 12\n\n6 / 3\n\n[1] 2\n\n\nそれぞれ加減乗除の計算結果が正しく出ていることを確認してほしい。なお，出力のところに[1]とあるのは，Rがベクトルを演算の基本としているからで，回答ベクトルの第1要素を返していることを意味する。\n四則演算の他に，次のような演算も可能である。\n\n# 整数の割り算\n8 %/% 3\n\n[1] 2\n\n# 余り\n7 %% 3\n\n[1] 1\n\n# 冪乗\n2^3\n\n[1] 8\n\n\nここで，#から始まる行はコメントアウトされたものとして，実際にコンソールに送られても計算されないことに注意しよう。スクリプトが単純なものである場合はコメントをつける必要はないが，複雑な計算になったり，他者と共有するときは「今どのような演算をしているか」を逐一解説するようにすると便利である。\n実践上のテクニックとして，複数行を一括でコメントアウトしたり，アンコメント(コメントアウトを解除する)したりすることがある。スクリプトを複数行選択した上で，CodeメニューからComment/Uncomment Linesを押すとコメント/アンコメントを切り替えられるので試してみよう。また，ショートカットキーも確認し，キーからコメント/アンコメントができるように慣れておくと良い(Ctrl+↑+C/Cmd+↑+C)。\nOne more tips.コメントではなく，大きな段落的な区切り(セクション区切り)が欲しいこともあるかもしれない。Codeメニューの一番上に「Insert Section」があるのでこれを選んでみよう。ショートカットキーから入力しても良い(Ctrl+↑+R/Cmd+↑+R)。セクション名を入力するボックスに適当な命名をすると，スクリプトにセクションが挿入される。次に示すのがセクションの例である。\n\n# 計算 --------------------------------------------------------------\n\nこれはもちろん実行に影響を与えないが，ソースが長くなった場合はこのセクション単位で移動したり(スクリプトペインの左下)，アウトラインを確認したり(スクリプトペインの右上にある横三本線)できるので，活用して欲しい。"
  },
  {
    "objectID": "chapter02.html#オブジェクト",
    "href": "chapter02.html#オブジェクト",
    "title": "3  Rの基礎",
    "section": "3.2 オブジェクト",
    "text": "3.2 オブジェクト\nRでは変数，関数などあらゆるものをオブジェクトとしてあつかう。オブジェクトには任意の名前をつけることができる(数字から始まる名前は不可)。 オブジェクトを作り，そこにある値を代入する例は次の通りである。\n\na &lt;- 1\nb &lt;- 2\nA &lt;- 3\na + b # 1 + 2におなじ\n\n[1] 3\n\nA + b # 3 + 2におなじ\n\n[1] 5\n\n\nここでは数字をオブジェクトに保管し，オブジェクトを使って計算をしている。大文字と小文字が区別されてるため，計算結果が異なることに注意。\n代入に使った記号&lt;-は「小なり」と「ハイフン」であるが，左矢印のイメージである。次のように，=や-&gt;を使うこともできる。\n\nB = 5\n7 -&gt; A\n\nここで，二行目に7 -&gt; Aを行った。先ほどA &lt;- 3としたが，その後にAには7を代入し直したので，値は上書きされる。\n\nA + b # 7 + 2におなじ\n\n[1] 9\n\n\nこのように，オブジェクトに代入を重ねると，警告などなしに上書きされることに注意して欲しい。似たようなオブジェクト名を使い回していると，本来意図していたものと違う値・状態を保管していることになりかねないからである。\nちなみに，オブジェクトの中身を確認するためには，そのままオブジェクト名を入力すれば良い。より丁寧には，print関数を使う。\n\na\n\n[1] 1\n\nprint(A)\n\n[1] 7\n\n\nあるいは，RStudioのEnvironmentタブをみると，現在Rが保持しているオブジェクトが確認でき，単一の値の場合はValueセクションにオブジェクト名と値を見ることができる。\n注意点として，オブジェクト名として，次の名前は使うことができない。＞ break, else, for, if, in, next, function, repeat, return, while, TRUE, FALSE.\nこれらはRで特別な意味を持つ予約語と呼ぶ。特にTRUEとFALSEは真・偽を表すもので，大文字のT,Fでも代用できるため，この一文字だけをオブジェクト名にするのは避けた方が良い。"
  },
  {
    "objectID": "chapter02.html#関数",
    "href": "chapter02.html#関数",
    "title": "3  Rの基礎",
    "section": "3.3 関数",
    "text": "3.3 関数\n関数は一般に\\(y=f(x)\\)と表されるが，要するに\\(x\\)を与えると\\(y\\)に形が変わる作用のことを指す。 プログラミング言語では一般に，\\(x\\)を引数(ひきすう,argument)，\\(y\\)を戻り値(もどりち,value)という。以下，関数の使用例を挙げる。\n\nsqrt(16)\n\n[1] 4\n\nhelp(\"sqrt\")\n\n最初の例は平方根square rootを取る関数sqrtであり，引数として数字を与えるとその平方根が返される。第二の例は関数の説明を表示させる関数helpであり，これを実行するとヘルプペインに関数の説明が表示される。"
  },
  {
    "objectID": "chapter02.html#オブジェクトの型",
    "href": "chapter02.html#オブジェクトの型",
    "title": "3  Rの基礎",
    "section": "3.5 オブジェクトの型",
    "text": "3.5 オブジェクトの型\nここまでみてきたように，数値や文字など(まとめてリテラルという)にも種類があるが，これをストックしておくものは全てオブジェクトである。オブジェクトとは変数のこと，と理解しても良いが，関数もオブジェクトに含まれる。\n\n3.5.1 ベクトル\nRのオブジェクトは単一の値しか持たないものではない。むしろ，複数の要素をセットで持つことができるのが特徴である。次に示すのは，ベクトルオブジェクトの例である。\n\nvec1 &lt;- c(2, 4, 5)\nvec2 &lt;- 1:3\nvec3 &lt;- 7:5\nvec4 &lt;- seq(from = 1, to = 7, by = 2)\nvec5 &lt;- c(vec2, vec3)\n\nそれぞれのオブジェクトの中身を確認しよう。 最初のc()は結合combine関数である。また，コロン(:)は連続する数値を与える。 seq関数は複数の引数を取るが，初期値，終了値，その間隔を指定した連続的なベクトルを生成する関数である。\nベクトルの計算は要素ごとに行われる。次のコードを実行し，どのように振る舞うか確認しよう。\n\nvec1 + vec2\n\n[1] 3 6 8\n\nvec3 * 2\n\n[1] 14 12 10\n\nvec1 + vec5\n\n[1]  3  6  8  9 10 10\n\n\n最後の計算でエラーが出なかったことに注目しよう。たとえばvec1 + vec4はエラーになるが，ここでは計算結果が示されている(=エラーにはなっていない)。数学的には，長さの違うベクトルは計算が定義されていないのだが，vec1の長さは3，vec5の長さは6であった。Rはベクトルを再利用するので，長いベクトルが短いベクトルの定数倍になるときは反復して利用される。すなわち，ここでは \\[ (2,4,5,2,4,5) + (1,2,3,7,6,5) = (3,6,8,9,10,10)\\] の計算がなされた。このRの仕様については，意図せぬ挙動にならぬよう注意しよう。\nベクトルの要素にアクセスするときは大括弧([ ])を利用する。 特に第二・第三行目のコードの使い方を確認しておこう。大括弧の中は，要素番号でも良いし，真/偽の判断でも良いのである。この真偽判断による指定の方法は，条件節(if文)をつかって要素を指定できるため，有用である。\n\nvec1[2]\n\n[1] 4\n\nvec2[c(1, 3)]\n\n[1] 1 3\n\nvec2[c(TRUE, FALSE, TRUE)]\n\n[1] 1 3\n\n\nここまで，ベクトルの要素は数値で説明してきたが，文字列などもベクトルとして利用できる。\n\nwords1 &lt;- c(\"Hello!\", \"Mr.\", \"Monkey\", \"Magic\", \"Orchestra\")\nwords1[3]\n\n[1] \"Monkey\"\n\nwords2 &lt;- LETTERS[1:10]\nwords2[8]\n\n[1] \"H\"\n\n\nここでLETTERSはアルファベット26文字が含まれている予約語ベクトルである。\nベクトルを引数に取る関数も多い。たとえば記述統計量である，平均，分散，標準偏差，合計などは，次のようにして計算する。\n\ndat &lt;- c(12,18,23,35,22)\nmean(dat) # 平均\n\n[1] 22\n\nvar(dat)  # 分散\n\n[1] 71.5\n\nsd(dat)   # 標準偏差\n\n[1] 8.455767\n\nsum(dat)  # 合計\n\n[1] 110\n\n\n他にも最大値maxや最小値min，中央値medianなどの関数が利用可能である。\n\n\n3.5.2 行列\n数学では線形代数でベクトルを扱うが，同時にベクトルが複数並んだ二次元の行列も扱うだろう。 Rでも行列のように配置したオブジェクトを利用できる。\n次のコードで作られる行列\\(A\\),\\(B\\)がどのようなものか確認しよう。\n\nA &lt;- matrix(1:6, ncol = 2)\nB &lt;- matrix(1:6, ncol = 2, byrow = T)\n\n行列を作る関数matrixは，引数として要素，列数(ncol)，行数(nrow)，要素配列を行ごとにするかどうかの指定(byrow)をとる。ここでは要素を1:6としており，1から6までの連続する整数をあたえている。ncolで2列であることを明示しているので，nrowで行数を指定してやる必要はない。byrowの有無でどのように数字が変わっているかは表示させれば一目瞭然であろう。\n与える要素が行数\\(\\times\\)列数に一致しておらず，ベクトルの再利用も不可能な場合はエラーが返ってくる。\nまた，ベクトルの要素指定のように，行列も大括弧を使って要素を指定することができる。行，列の順に指定し，行だけ，列だけの指定も可能である。\n\nA[2, 2]\n\n[1] 5\n\nA[1, ]\n\n[1] 1 4\n\nA[, 2]\n\n[1] 4 5 6\n\n\n\n\n3.5.3 リスト型\n行列はサイズの等しいベクトルのセットであるが，サイズの異なる要素をまとめて一つのオブジェクトとして保管しておきたいときはリスト型をつかう。\n\nObj1 &lt;- list(1:4, matrix(1:6, ncol = 2), 3)\n\nこのオブジェクトの第一要素([[1]])はベクトル，第二要素は行列，第三要素は要素1つのベクトル(スカラー)である。オブジェクトの要素の要素(ex.第二要素の行列の2行3列目の要素)にどのようにアクセスすれば良いか，考えてみよう。\nこのリストは要素へのアクセスの際に[[1]]など数字が必要だが，要素に名前をつけることで利便性が増す。\n\nObj2 &lt;- list(\n  vec1 = 1:5,\n  mat1 = matrix(1:10, nrow = 5),\n  char1 = \"YMO\"\n)\n\nこの名前付きリストの要素にアクセスするときは，$記号を用いることができる。\n\nObj2$vec1\n\n[1] 1 2 3 4 5\n\n\nこれを踏まえて，名前付きリストの要素の要素にアクセスするにはどうすれば良いか，考えてみよう。\nリスト型はこのように，要素のサイズ・長さを問わないため，いろいろなものを保管しておくことができる。統計関数の結果はリスト型で得られることが多く，そのような場合，リストの要素も長くなりがちである。リストがどのような構造を持っているかを見るために，str関数が利用できる。\n\nstr(Obj2)\n\nList of 3\n $ vec1 : int [1:5] 1 2 3 4 5\n $ mat1 : int [1:5, 1:2] 1 2 3 4 5 6 7 8 9 10\n $ char1: chr \"YMO\"\n\n\nstr関数の返す結果と同じものが，RStudioのEnvironmentタブからオブジェクトを見ることでも得られる。 また，リストの要素としてリストを持つ，すなわち階層的になることもある。そのような場合，必要としている要素にどのようにアクセスすれば良いか，確認しておこう。\n\nObj3 &lt;- list(Obj1,Second =Obj2)\nstr(Obj3)\n\nList of 2\n $       :List of 3\n  ..$ : int [1:4] 1 2 3 4\n  ..$ : int [1:3, 1:2] 1 2 3 4 5 6\n  ..$ : num 3\n $ Second:List of 3\n  ..$ vec1 : int [1:5] 1 2 3 4 5\n  ..$ mat1 : int [1:5, 1:2] 1 2 3 4 5 6 7 8 9 10\n  ..$ char1: chr \"YMO\"\n\n\n\n\n3.5.4 データフレーム型\nリスト型は要素のサイズを問わないことはすでに述べた。しかしデータ解析を行うときは得てして，2次元スプレッドシートのような形式である。すなわち一行に1オブザベーション，各列は変数を表すといった具合である。このように矩形かつ，列に変数名を持たせることができる特殊なリスト型をデータフレーム型という。以下はそのようなオブジェクトの例である。\n\ndf &lt;- data.frame(\n  name = c(\"Ishino\", \"Pierre\", \"Marin\"),\n  origin = c(\"Shizuoka\",\"Shizuoka\",\"Hokkaido\"),\n  height = c(170, 180, 160),\n  salary = c(1000, 20, 800)\n)\n# 内容を表示させる\ndf\n\n    name   origin height salary\n1 Ishino Shizuoka    170   1000\n2 Pierre Shizuoka    180     20\n3  Marin Hokkaido    160    800\n\n# 構造を確認する\nstr(df)\n\n'data.frame':   3 obs. of  4 variables:\n $ name  : chr  \"Ishino\" \"Pierre\" \"Marin\"\n $ origin: chr  \"Shizuoka\" \"Shizuoka\" \"Hokkaido\"\n $ height: num  170 180 160\n $ salary: num  1000 20 800\n\n\nところで，心理統計の初歩としてStevensの尺度水準(Stevens 1946)について学んだことと思う。そこでは数値が，その値に許される演算のレベルをもとに，名義，順序，間隔，比率尺度水準という4つの段階に分類される。間隔・比率尺度水準の数値は数学的な計算を施しても良いが，順序尺度水準や名義尺度水準の数字はそのような計算が許されない(ex.2番目に好きな人と3番目に好きな人が一緒になっても，1番好きな人に敵わない。)\nRには，こうした尺度水準に対応した数値型がある。間隔・比率尺度水準は計算可能なのでnumeric型でよいが，名義尺度水準はfactor型(要因型，因子型とも呼ばれる)，順序尺度水準はordered.factor型と呼ばれるものである。\nfactor型の変数の例を挙げる。すでに文字型として入っているものをfactor型として扱うよう変換するためには，as.factor関数が利用できる。\n\ndf$origin &lt;- as.factor(df$origin)\ndf$origin\n\n[1] Shizuoka Shizuoka Hokkaido\nLevels: Hokkaido Shizuoka\n\n\n要素を表示させて見ると明らかなように，値としてはShizuoka,Shizuoka,Hokkaidoの3つあるが，レベル(水準)はShizuoka,Hokkaidoの2つである。このようにfactor型にしておくと，カテゴリとして使えて便利である。\n次に示すのは順序つきfactor型変数の例である。\n\n# 順序付き要因型の例\nratings &lt;- factor(c(\"低い\", \"高い\", \"中程度\", \"高い\", \"低い\"), \n                  levels = c(\"低い\", \"中程度\", \"高い\"), \n                  ordered = TRUE)\n# ratingsの内容と型を確認\nprint(ratings)\n\n[1] 低い   高い   中程度 高い   低い  \nLevels: 低い &lt; 中程度 &lt; 高い\n\n\n集計の際などはfactor型と違わないため，使用例は少ないかもしれない。しかしRは統計モデルを適用する時に，尺度水準に対応した振る舞いをするものがあるので，データの尺度水準を丁寧に設定しておくのも良いだろう。\nデータフレームの要素へのアクセスは，基本的に変数名を介してのものになるだろう。たとえば先ほどのおオブジェクトdf の数値変数に統計処理をしたい場合は，次のようにすると良い。\n\nmean(df$height)\n\n[1] 170\n\nsum(df$salary)\n\n[1] 1820\n\n\nまた，データフレームオブジェクトを一括で要約する関数もある。\n\nsummary(df)\n\n     name                origin      height        salary      \n Length:3           Hokkaido:1   Min.   :160   Min.   :  20.0  \n Class :character   Shizuoka:2   1st Qu.:165   1st Qu.: 410.0  \n Mode  :character                Median :170   Median : 800.0  \n                                 Mean   :170   Mean   : 606.7  \n                                 3rd Qu.:175   3rd Qu.: 900.0  \n                                 Max.   :180   Max.   :1000.0"
  },
  {
    "objectID": "chapter02.html#変数の型",
    "href": "chapter02.html#変数の型",
    "title": "3  Rの基礎",
    "section": "3.5 変数の型",
    "text": "3.5 変数の型"
  },
  {
    "objectID": "chapter02.html#外部ファイルの読み込み",
    "href": "chapter02.html#外部ファイルの読み込み",
    "title": "3  Rの基礎",
    "section": "3.6 外部ファイルの読み込み",
    "text": "3.6 外部ファイルの読み込み\n解析の実際では，データセットを手入力することはなく，データベースから取り出してくるか，別ファイルから読み込むことが一般的であろう。\n統計パッケージの多くは独自のファイル形式を持っており，Rにはそれぞれに対応した読み込み関数も用意されているが，ここでは最もプレーンな形でのデータであるCSV形式からの読み込み例を示す。\n提供されたサンプルデータ，Baseball.csvを読み込むことを考える。なおこのデータはUTF-8形式で保存されている2。これを読み込むには，Rがデフォルトで持っている関数read.csvが使える。\n\ndat &lt;- read.csv(\"Baseball.csv\")\nhead(dat)\n\n      Year       Name team salary bloodType height weight UniformNum position\n1 2011年度 永川　勝浩 Carp  12000       O型    188     97         20     投手\n2 2011年度 前田　健太 Carp  12000       A型    182     73         18     投手\n3 2011年度 栗原　健太 Carp  12000       O型    183     95          5   内野手\n4 2011年度 東出　輝裕 Carp  10000       A型    171     73          2   内野手\n5 2011年度   シュルツ Carp   9000      不明    201    100         70     投手\n6 2011年度   大竹　寛 Carp   8000       B型    183     90         17     投手\n  Games AtBats Hit HR Win Lose Save Hold\n1    19     NA  NA NA   1    2    0    0\n2    31     NA  NA NA  10   12    0    0\n3   144    536 157 17  NA   NA   NA   NA\n4   137    543 151  0  NA   NA   NA   NA\n5    19     NA  NA NA   0    0    0    9\n6     6     NA  NA NA   1    1    0    0\n\nstr(dat)\n\n'data.frame':   7944 obs. of  17 variables:\n $ Year      : chr  \"2011年度\" \"2011年度\" \"2011年度\" \"2011年度\" ...\n $ Name      : chr  \"永川　勝浩\" \"前田　健太\" \"栗原　健太\" \"東出　輝裕\" ...\n $ team      : chr  \"Carp\" \"Carp\" \"Carp\" \"Carp\" ...\n $ salary    : int  12000 12000 12000 10000 9000 8000 8000 7500 7000 6600 ...\n $ bloodType : chr  \"O型\" \"A型\" \"O型\" \"A型\" ...\n $ height    : int  188 182 183 171 201 183 177 173 176 188 ...\n $ weight    : int  97 73 95 73 100 90 82 73 80 97 ...\n $ UniformNum: int  20 18 5 2 70 17 31 6 1 43 ...\n $ position  : chr  \"投手\" \"投手\" \"内野手\" \"内野手\" ...\n $ Games     : int  19 31 144 137 19 6 110 52 52 40 ...\n $ AtBats    : int  NA NA 536 543 NA NA 299 192 44 149 ...\n $ Hit       : int  NA NA 157 151 NA NA 60 41 11 35 ...\n $ HR        : int  NA NA 17 0 NA NA 4 2 0 1 ...\n $ Win       : int  1 10 NA NA 0 1 NA NA NA NA ...\n $ Lose      : int  2 12 NA NA 0 1 NA NA NA NA ...\n $ Save      : int  0 0 NA NA 0 0 NA NA NA NA ...\n $ Hold      : int  0 0 NA NA 9 0 NA NA NA NA ...\n\n\nここでhead関数はデータフレームなどオブジェクトの冒頭部分(デフォルトでは6行分)を表示させるものである。また，str関数の結果から明らかなように，読み込んだファイルが自動的にデータフレーム型になっている。\nちなみに，サンプルデータにおいて欠損値に該当する箇所にはNAの文字が入っていた。read.csv関数では，欠損値はデフォルトで文字列”NA”としている。しかし，実際は別の文字(ex.ピリオド)や，特定の値(ex.9999)の場合もあるだろう。その際は，オプションna.stringsで「欠損値として扱う値」を指示すれば良い。"
  },
  {
    "objectID": "chapter03.html#tidyverseの導入",
    "href": "chapter03.html#tidyverseの導入",
    "title": "4  Rによるデータハンドリング",
    "section": "4.1 tidyverseの導入",
    "text": "4.1 tidyverseの導入\n本講義ではtidyverseをつかったデータハンドリングを扱う。tidyverseは，データに対する統一的な設計方針を表す概念でもあり，具体的にはそれを実装したパッケージ名でもある。まずはtidyverseパッケージをインストール(ダウンロード)し，次のコードでRに読み込んでおく。\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nAttaching core tidyverse packages,と表示され，複数のパッケージ名にチェックマークが入っていたものが表示されただろう。tidyverseパッケージはこれらの下位パッケージを含むパッケージ群である。これに含まれるdplyr,tidyrパッケージはデータの整形に，readrはファイルの読み込みに，forecatsはFactor型変数の操作に，stringrは文字型変数の操作に，lubridateは日付型変数の操作に，tibbleはデータフレーム型オブジェクトの操作に，purrrはデータに適用する関数に，ggplot2は可視化に特化したパッケージである。\n続いてConflictsについての言及がある。tidyverseパッケージに限らず，パッケージを読み込むと表示されることのあるこの警告は，「関数名の衝突」を意味している。ここまで，Rを起動するだけで，sqrt,meanなどの関数が利用できた。これはRの基本関数であるが，具体的にはbaseパッケージに含まれた関数である。Rは起動時にbaseなどいくつかのパッケージを自動的に読み込んでいるのである。これに別途パッケージを読み込むとき，あとで読み込まれたパッケージが同名の関数を使っていることがある。このとき，関数名は後から読み込んだもので上書きされる。そのことについての警告が表示されているのである。具体的にみると，dplyr::filter() masks stats::filter()とあるのは，最初に読み込んでいたstatsパッケージのfilter関数は，(tidyverseパッケージに含まれる)dplyrパッケージのもつ同名の関数で上書きされ，今後はこちらが優先的に利用されるよ，ということを示している。\nこのような同音異字関数は，関数を特定するときに混乱を招くかもしれない。あるパッケージの関数であることを明示したい場合は，この警告文にあるように，パッケージ名::関数名，という書き方にすると良い。"
  },
  {
    "objectID": "chapter03.html#パイプ演算子",
    "href": "chapter03.html#パイプ演算子",
    "title": "4  Rによるデータハンドリング",
    "section": "4.2 パイプ演算子",
    "text": "4.2 パイプ演算子\n続いてパイプ演算子について解説する。パイプ演算子はtidyverseパッケージに含まれていたmagrittrパッケージで導入されたもので，これによってデータハンドリングの利便性が一気に向上した。そこでRもver 4.2からこの演算子を導入し，特段パッケージのインストールを必要としなくとも使えるようになった。このR本体のパイプ演算子のことを，tidyverseのそれと区別して，ナイーブパイプと呼ぶこともある。\nともあれこのパイプ演算子がいかに優れたものであるかを解説しよう。次のスクリプトは，あるデータセットの標準偏差を計算するものである1。数式で表現すると次の通り。ここで\\(\\bar{x}\\)はデータベクトル\\(x\\)の算術平均。 \\[v = \\sqrt{\\frac{1}{n}\\sum_{i=1}^n (x_i - \\bar{x})^2}\\]\n\ndat &lt;- c(10,13,15,12,14) # データ\nM &lt;- mean(dat)           # 平均\ndev &lt;- dat - M           # 平均偏差\npow &lt;- dev^2             # 平均偏差の2乗\nvariance &lt;- mean(pow)    # 平均偏差の2乗の平均が分散\nstandardDev &lt;- sqrt(variance) # 分散の正の平方根が標準偏差\n\nこのように，標準偏差オブジェクトstandardDevを作るまでに平均オブジェクトM，平均偏差ベクトルdev，その2乗したものpow，分散varianceと4つものオブジェクトを作って答えに到達している。また，作られるオブジェクトが左側にあり，その右側にどのような演算をしているかが記述されているため，頭の中では「オブジェクトを作る，次の計算で」と読んでいったことだろう。\nパイプ演算子はこの思考の流れをそのまま具現化する。パイプ演算子は%&gt;%と書き，左側の演算結果をパイプ演算子の右側に来る関数の第一引数として右側に渡す役目をする。これを踏まえて上のスクリプトを書き直してみよう。ちなみにパイプ演算子はショートカットCtrl(Cmd)+Shift+Mで入力できる。\n\ndat &lt;- c(10,13,15,12,14) \nstandardDev &lt;- dat %&gt;%\n  { . - mean(.) } %&gt;%\n  { .^2 } %&gt;%\n  mean() %&gt;%\n  sqrt()\n\nここでピリオド(.)は，前の関数から引き継いだもの(プレイスホルダー)であり，二行目は{dat - mean(dat)}，すなわち平均偏差の計算を意味している。それを次のパイプで二乗し，平均し，平方根を取っている。平均や平方根を取るときにプレイスホルダーが明示されていないのは，引き受けた引数がどこに入るかが明らかなので省略しているからである。\nこの例に見るように，パイプ演算子を使うと，データ\\(\\to\\)平均偏差$\\(2乗\\)\\(平均\\)$平方根，という計算の流れと，スクリプトの流れが一致しているため，理解しやすくなったのではないだろうか。\nまた，ここでの計算は，次のように書くこともできる。\n\nstandardDev &lt;- sqrt(mean((dat- mean(dat))^2))\n\nこの書き方は，関数の中に関数がある入れ子状態になっており，\\(y = h(g(f(x)))\\)のような形式である。これも対応するカッコの内側から読み解いていく必要があり，思考の流れと逆転しているため理解が難しい。パイプ演算子を使うと，x %&gt;% f() %&gt;% g() %&gt;% h() -&gt; yのように記述できるため，苦労せずに読むことができる。\n以下はこのパイプ演算子を使った記述で進めていくので，この表記法(およびショートカット)に慣れていこう。"
  },
  {
    "objectID": "chapter03.html#変数を作る",
    "href": "chapter03.html#変数を作る",
    "title": "4  Rによるデータハンドリング",
    "section": "4.3 変数を作る",
    "text": "4.3 変数を作る"
  },
  {
    "objectID": "chapter03.html#行選択と列選択",
    "href": "chapter03.html#行選択と列選択",
    "title": "4  Rによるデータハンドリング",
    "section": "4.4 行選択と列選択",
    "text": "4.4 行選択と列選択"
  },
  {
    "objectID": "chapter03.html#ロング型とワイド型",
    "href": "chapter03.html#ロング型とワイド型",
    "title": "4  Rによるデータハンドリング",
    "section": "4.6 ロング型とワイド型",
    "text": "4.6 ロング型とワイド型"
  },
  {
    "objectID": "chapter03.html#データ整形課題",
    "href": "chapter03.html#データ整形課題",
    "title": "4  Rによるデータハンドリング",
    "section": "4.8 データ整形課題",
    "text": "4.8 データ整形課題"
  },
  {
    "objectID": "chapter04.html#rmdqmdの使い方",
    "href": "chapter04.html#rmdqmdの使い方",
    "title": "5  Rによるレポートの作成",
    "section": "5.1 Rmd/Qmdの使い方",
    "text": "5.1 Rmd/Qmdの使い方"
  },
  {
    "objectID": "chapter04.html#プロットによる基本的な描画",
    "href": "chapter04.html#プロットによる基本的な描画",
    "title": "5  Rによるレポートの作成",
    "section": "5.2 プロットによる基本的な描画",
    "text": "5.2 プロットによる基本的な描画"
  },
  {
    "objectID": "chapter04.html#ggplotによる描画",
    "href": "chapter04.html#ggplotによる描画",
    "title": "5  Rによるレポートの作成",
    "section": "5.3 ggplotによる描画",
    "text": "5.3 ggplotによる描画"
  },
  {
    "objectID": "chapter04.html#各種geomの練習",
    "href": "chapter04.html#各種geomの練習",
    "title": "5  Rによるレポートの作成",
    "section": "5.4 各種geomの練習",
    "text": "5.4 各種geomの練習"
  },
  {
    "objectID": "chapter04.html#ggplotオブジェクトを並べる",
    "href": "chapter04.html#ggplotオブジェクトを並べる",
    "title": "5  Rによるレポートの作成",
    "section": "5.5 ggplotオブジェクトを並べる",
    "text": "5.5 ggplotオブジェクトを並べる"
  },
  {
    "objectID": "chapter04.html#テーマの変更レポートに合わせる",
    "href": "chapter04.html#テーマの変更レポートに合わせる",
    "title": "5  Rによるレポートの作成",
    "section": "5.6 テーマの変更（レポートに合わせる）",
    "text": "5.6 テーマの変更（レポートに合わせる）"
  },
  {
    "objectID": "chapter05.html#代入",
    "href": "chapter05.html#代入",
    "title": "6  Rでプログラミング",
    "section": "6.1 代入",
    "text": "6.1 代入"
  },
  {
    "objectID": "chapter05.html#反復",
    "href": "chapter05.html#反復",
    "title": "6  Rでプログラミング",
    "section": "6.2 反復",
    "text": "6.2 反復"
  },
  {
    "objectID": "chapter05.html#条件分岐",
    "href": "chapter05.html#条件分岐",
    "title": "6  Rでプログラミング",
    "section": "6.3 条件分岐",
    "text": "6.3 条件分岐"
  },
  {
    "objectID": "chapter05.html#さまざまな乱数",
    "href": "chapter05.html#さまざまな乱数",
    "title": "6  Rでプログラミング",
    "section": "6.4 さまざまな乱数",
    "text": "6.4 さまざまな乱数"
  },
  {
    "objectID": "chapter05.html#確率分布の関数",
    "href": "chapter05.html#確率分布の関数",
    "title": "6  Rでプログラミング",
    "section": "6.5 確率分布の関数",
    "text": "6.5 確率分布の関数"
  },
  {
    "objectID": "chapter06.html#サンプリング関数",
    "href": "chapter06.html#サンプリング関数",
    "title": "7  確率とシミュレーション",
    "section": "7.1 サンプリング関数",
    "text": "7.1 サンプリング関数"
  },
  {
    "objectID": "chapter06.html#期待値と分散のシミュレーション",
    "href": "chapter06.html#期待値と分散のシミュレーション",
    "title": "7  確率とシミュレーション",
    "section": "7.2 期待値と分散のシミュレーション",
    "text": "7.2 期待値と分散のシミュレーション"
  },
  {
    "objectID": "chapter06.html#母集団と標本",
    "href": "chapter06.html#母集団と標本",
    "title": "7  確率とシミュレーション",
    "section": "7.3 母集団と標本",
    "text": "7.3 母集団と標本"
  },
  {
    "objectID": "chapter06.html#一致性",
    "href": "chapter06.html#一致性",
    "title": "7  確率とシミュレーション",
    "section": "7.4 一致性",
    "text": "7.4 一致性"
  },
  {
    "objectID": "chapter06.html#不偏性",
    "href": "chapter06.html#不偏性",
    "title": "7  確率とシミュレーション",
    "section": "7.5 不偏性",
    "text": "7.5 不偏性"
  },
  {
    "objectID": "chapter06.html#有効性",
    "href": "chapter06.html#有効性",
    "title": "7  確率とシミュレーション",
    "section": "7.6 有効性",
    "text": "7.6 有効性"
  },
  {
    "objectID": "chapter07.html#帰無仮説検定の論理",
    "href": "chapter07.html#帰無仮説検定の論理",
    "title": "8  統計的仮設検定の論理とエラー",
    "section": "8.1 帰無仮説検定の論理",
    "text": "8.1 帰無仮説検定の論理"
  },
  {
    "objectID": "chapter07.html#相関係数の検定",
    "href": "chapter07.html#相関係数の検定",
    "title": "8  統計的仮設検定の論理とエラー",
    "section": "8.2 相関係数の検定",
    "text": "8.2 相関係数の検定"
  },
  {
    "objectID": "chapter07.html#標本相関係数の分布",
    "href": "chapter07.html#標本相関係数の分布",
    "title": "8  統計的仮設検定の論理とエラー",
    "section": "8.3 標本相関係数の分布",
    "text": "8.3 標本相関係数の分布"
  },
  {
    "objectID": "chapter07.html#種類の検定のエラー確率",
    "href": "chapter07.html#種類の検定のエラー確率",
    "title": "8  統計的仮設検定の論理とエラー",
    "section": "8.4 ２種類の検定のエラー確率",
    "text": "8.4 ２種類の検定のエラー確率"
  },
  {
    "objectID": "chapter08.html#一標本検定",
    "href": "chapter08.html#一標本検定",
    "title": "9  平均値差の検定",
    "section": "9.1 一標本検定",
    "text": "9.1 一標本検定"
  },
  {
    "objectID": "chapter08.html#二標本検定",
    "href": "chapter08.html#二標本検定",
    "title": "9  平均値差の検定",
    "section": "9.2 二標本検定",
    "text": "9.2 二標本検定"
  },
  {
    "objectID": "chapter08.html#二標本検定ウェルチの補正",
    "href": "chapter08.html#二標本検定ウェルチの補正",
    "title": "9  平均値差の検定",
    "section": "9.3 二標本検定（ウェルチの補正）",
    "text": "9.3 二標本検定（ウェルチの補正）"
  },
  {
    "objectID": "chapter08.html#対応のある二標本検定",
    "href": "chapter08.html#対応のある二標本検定",
    "title": "9  平均値差の検定",
    "section": "9.4 対応のある二標本検定",
    "text": "9.4 対応のある二標本検定"
  },
  {
    "objectID": "chapter08.html#レポートを書くような課題",
    "href": "chapter08.html#レポートを書くような課題",
    "title": "9  平均値差の検定",
    "section": "9.5 レポートを書くような課題",
    "text": "9.5 レポートを書くような課題"
  },
  {
    "objectID": "chapter09.html#分散分析の基礎",
    "href": "chapter09.html#分散分析の基礎",
    "title": "10  多群の平均値差の検定",
    "section": "10.1 分散分析の基礎",
    "text": "10.1 分散分析の基礎"
  },
  {
    "objectID": "chapter09.html#検定の多重性",
    "href": "chapter09.html#検定の多重性",
    "title": "10  多群の平均値差の検定",
    "section": "10.2 検定の多重性",
    "text": "10.2 検定の多重性"
  },
  {
    "objectID": "chapter09.html#anova君を使う",
    "href": "chapter09.html#anova君を使う",
    "title": "10  多群の平均値差の検定",
    "section": "10.3 ANOVA君を使う",
    "text": "10.3 ANOVA君を使う"
  },
  {
    "objectID": "chapter09.html#betweenデザイン",
    "href": "chapter09.html#betweenデザイン",
    "title": "10  多群の平均値差の検定",
    "section": "10.4 Betweenデザイン",
    "text": "10.4 Betweenデザイン"
  },
  {
    "objectID": "chapter09.html#withinデザイン",
    "href": "chapter09.html#withinデザイン",
    "title": "10  多群の平均値差の検定",
    "section": "10.5 Withinデザイン",
    "text": "10.5 Withinデザイン"
  },
  {
    "objectID": "chapter10.html#統計的検定とqrps",
    "href": "chapter10.html#統計的検定とqrps",
    "title": "11  帰無仮説検定のシミュレーション",
    "section": "11.1 統計的検定とQRPs",
    "text": "11.1 統計的検定とQRPs"
  },
  {
    "objectID": "chapter10.html#タイプ２エラー確率のコントールとサンプルサイズ設計",
    "href": "chapter10.html#タイプ２エラー確率のコントールとサンプルサイズ設計",
    "title": "11  帰無仮説検定のシミュレーション",
    "section": "11.2 タイプ２エラー確率のコントールとサンプルサイズ設計",
    "text": "11.2 タイプ２エラー確率のコントールとサンプルサイズ設計"
  },
  {
    "objectID": "chapter10.html#サンプルサイズ設計の実践",
    "href": "chapter10.html#サンプルサイズ設計の実践",
    "title": "11  帰無仮説検定のシミュレーション",
    "section": "11.3 サンプルサイズ設計の実践",
    "text": "11.3 サンプルサイズ設計の実践\n\n11.3.1 一標本t検定\n\n\n11.3.2 二標本t検定\n\n\n11.3.3 相関係数のサンプルサイズ設計"
  },
  {
    "objectID": "chapter11.html#回帰分析の基礎",
    "href": "chapter11.html#回帰分析の基礎",
    "title": "12  回帰分析",
    "section": "12.1 回帰分析の基礎",
    "text": "12.1 回帰分析の基礎"
  },
  {
    "objectID": "chapter11.html#重回帰分析の場合",
    "href": "chapter11.html#重回帰分析の場合",
    "title": "12  回帰分析",
    "section": "12.2 重回帰分析の場合",
    "text": "12.2 重回帰分析の場合"
  },
  {
    "objectID": "chapter11.html#回帰分析のいくつかの特徴",
    "href": "chapter11.html#回帰分析のいくつかの特徴",
    "title": "12  回帰分析",
    "section": "12.3 回帰分析のいくつかの特徴",
    "text": "12.3 回帰分析のいくつかの特徴"
  },
  {
    "objectID": "chapter11.html#シミュレーションとパラメタリカバリ",
    "href": "chapter11.html#シミュレーションとパラメタリカバリ",
    "title": "12  回帰分析",
    "section": "12.4 シミュレーションとパラメタリカバリ",
    "text": "12.4 シミュレーションとパラメタリカバリ"
  },
  {
    "objectID": "chapter11.html#係数の標準誤差",
    "href": "chapter11.html#係数の標準誤差",
    "title": "12  回帰分析",
    "section": "12.5 係数の標準誤差",
    "text": "12.5 係数の標準誤差"
  },
  {
    "objectID": "chapter11.html#係数の検定",
    "href": "chapter11.html#係数の検定",
    "title": "12  回帰分析",
    "section": "12.6 係数の検定",
    "text": "12.6 係数の検定"
  },
  {
    "objectID": "chapter11.html#サンプルサイズ設計",
    "href": "chapter11.html#サンプルサイズ設計",
    "title": "12  回帰分析",
    "section": "12.7 サンプルサイズ設計",
    "text": "12.7 サンプルサイズ設計"
  },
  {
    "objectID": "chapter12.html#一般線型モデル",
    "href": "chapter12.html#一般線型モデル",
    "title": "13  線型モデルの展開",
    "section": "13.1 一般線型モデル",
    "text": "13.1 一般線型モデル"
  },
  {
    "objectID": "chapter12.html#一般化線型モデル",
    "href": "chapter12.html#一般化線型モデル",
    "title": "13  線型モデルの展開",
    "section": "13.2 一般化線型モデル",
    "text": "13.2 一般化線型モデル"
  },
  {
    "objectID": "chapter12.html#階層線型モデル",
    "href": "chapter12.html#階層線型モデル",
    "title": "13  線型モデルの展開",
    "section": "13.3 階層線型モデル",
    "text": "13.3 階層線型モデル"
  },
  {
    "objectID": "chapter13.html#因子分析",
    "href": "chapter13.html#因子分析",
    "title": "14  多変量解析の入り口",
    "section": "14.1 因子分析",
    "text": "14.1 因子分析"
  },
  {
    "objectID": "chapter13.html#構造方程式モデリング",
    "href": "chapter13.html#構造方程式モデリング",
    "title": "14  多変量解析の入り口",
    "section": "14.2 構造方程式モデリング",
    "text": "14.2 構造方程式モデリング"
  },
  {
    "objectID": "chapter02.html#変数の種類",
    "href": "chapter02.html#変数の種類",
    "title": "3  Rの基礎",
    "section": "3.4 変数の種類",
    "text": "3.4 変数の種類\n先ほどのhelp関数に与えた引数\"sqrt\"は文字列である。文字列であることを明示するためにダブルクォーテーション(\")で囲っている(シングルクォーテーションで囲っても良い)。このように，Rが扱う変数は数字だけではない。変数の種類は数値型(numeric)，文字型(character)，論理値(logical)の3種類がある。\n\nobj1 &lt;- 1.5\nobj2 &lt;- \"Hello\"\nobj3 &lt;- TRUE\n\n数値型は整数(integer)，実数(double)を含み1，そのほか，複素数型(complex)，欠損値を表すNA，非数値を表すNaN(Not a Number)，無限大を表すInfなどがある。\n文字型はすでに説明した通りで，対になるクォーテーションが必要であることに注意してほしい。終わりを表すクォーテーションがなければ，Rは続く数字や文字も含めた「語」として処理する。この場合，enterキーを押しても文字入力が閉じられていないため，コンソールには「+」の表示が出る(この記号は前の行から入力が続いており，プロンプト状態ではないことを表している)。\nまた，文字型は当然のことながら四則演算の対象にならない。ただし，論理型のTRUE/FALSEはそれぞれ1,0に対応しているため，計算結果が表示される。次のコードを実行してこのことを確認しよう。\n\nobj1 + obj2\nobj1 + obj3"
  },
  {
    "objectID": "chapter02.html#footnotes",
    "href": "chapter02.html#footnotes",
    "title": "3  Rの基礎",
    "section": "",
    "text": "実数はreal numberじゃないのか，という指摘もあろうかとおもう。ここでは電子計算機上の数値の分類である，倍精度浮動小数点数(double-precision floating-point number)の意味である。倍精度とは単精度の倍を意味しており，単精度は32ビットを，倍精度は64ビットを単位として一つの数字を表す仕組みのことである。↩︎\nUTF-8というのは文字コードの一種で，0と1からなる機械のデータを人間語に翻訳するためのコードであり，世界的にもっとも一般的な文字コードである。しかしWindowsOSはいまだにデフォルトでShift-JISというローカルな文字コードにしているため，このファイルを一度Windows機のExcelなどで開くと文字化けし，以下の手続が正常に作用しなくなることがよくある。本講義で使う場合は，ダウンロード後にExcelなどで開くことなく，直接Rから読み込むようにされたし。↩︎"
  },
  {
    "objectID": "chapter02.html#課題",
    "href": "chapter02.html#課題",
    "title": "3  Rの基礎",
    "section": "3.8 課題",
    "text": "3.8 課題\n\nRを起動し，新しいスクリプトファイルを作成してください。そのファイル内で，2つの整数を宣言し，足し算を行い，結果をコンソールに表示してください。\nスクリプトに次の計算を書き，実行してください。\n\n\\(\\frac{5}{6} + \\frac{1}{3}\\)\n\\(9.6 \\div 4\\)\n\\(2^3 + \\frac{1}{2}\\)\n\\(3\\times (2^2 + \\frac{4}{5})\\)\n\\((-2)^4\\)\n\\(2\\sqrt{2} \\times \\sqrt{3}\\)\n\\(2\\log_e 25\\)\n\nRのスクリプトファイル内で，ベクトルを作成してください。ベクトルには1から10までの整数を格納してください。その後，ベクトルの要素の合計と平均を計算してください。ベクトルを合計する関数はsum，平均はmeanです。\n次の表をリスト型オブジェクトTblにしてください。\n\n\n\n\nName\nPop\nArea\nDensity\n\n\n\n\nTokyo\n1,403\n2,194\n6,397\n\n\nBeijing\n2,170\n16,410\n1,323\n\n\nSeoul\n949\n605\n15,688\n\n\n\n\n先ほど作ったTblオブジェクトの，東京(Tokyo)の面積(Area)の値を表示させてください(リスト要素へのアクセス)\nTblオブジェクトの人口(Pop)変数の平均を計算してください。\nTblオブジェクトをデータフレーム型オブジェクトdf2に変換してください。新たに作り直しても良いですし，as.data.frame関数を使っても良い。\nRのスクリプトを使用して，Baseball2022.csv ファイルを読み込み，データフレームdatに格納してください。ただし，このファイルの欠損値は\\(999\\)という数値になっています。\n読み込んだdatの冒頭の10行を表示してみてください。\n読み込んだdatにsummary関数を適用してください。\nこのデータセットの変数teamは名義尺度水準です。Factor型にしてください。他にもFactor型にすべき変数が2つありますので，それらも同様に型を変換してください。\nこのデータセットの変数の中で，数値データに対して平均，分散，標準偏差，最大値，最小値，中央値を それぞれ算出してください。\n課題を記述したスクリプトファイルに対して，Reformatなどで整形してください。\n\n\n\n\n\nStevens, Stanley Smith. 1946. “On the Theory of Scales of Measurement.” Science 103 (2684): 677–80."
  },
  {
    "objectID": "chapter02.html#おまけスクリプトの清書",
    "href": "chapter02.html#おまけスクリプトの清書",
    "title": "3  Rの基礎",
    "section": "3.7 おまけ；スクリプトの清書",
    "text": "3.7 おまけ；スクリプトの清書\nさて，ここまでスクリプトを書いてきたことで，そこそこ長いスクリプトファイルができたことと思う。 スクリプトの記述については，もちろん「動けばいい」という考え方もあるが，美しくかけていたほうがなお良いだろう。「美しい」をどのように定義するかは異論あるだろうが，一般に「コード規約」と呼ばれる清書方法がある。ここでは細部まで言及しないが，RStudioのCodeメニューからReformat Codeを実行してみよう。スクリプトファイルが綺麗に整ったように見えないだろうか?\n美しいコードはデバッグにも役立つ。時折Reformatすることを心がけよう。"
  },
  {
    "objectID": "chapter03.html#課題1",
    "href": "chapter03.html#課題1",
    "title": "4  Rによるデータハンドリング",
    "section": "4.3 課題1",
    "text": "4.3 課題1\n\nsqrt,mean関数がbaseパッケージに含まれることをヘルプで確認してみよう。どこを見れば良いだろうか?filter,lag関数はどうだろうか?\ntidyverseパッケージを読み込んだことで，filter関数はdplyrパッケージのものが優先されることになった。dplyrパッケージのfilter関数をヘルプで見てみよう。\n上書きされる前のstatsパッケージのfilter関数に関するヘルプを見てみよう。\n先ほどのデータを使って，平均値絶対偏差(MeanAD)および中央絶対偏差(MAD)をパイプ演算子を使って算出してみよう。なお平均値絶対偏差，中央値絶対偏差は次のように定義される。また絶対値を計算するR関数はabsである。\n\n\\[MeanAD = \\frac{1}{n}\\sum_{i=1}^n|x_i - \\bar{x}|\\] \\[MAD = median(|x_1-median(x)|,\\cdots,|x_n-median(x)|)\\]"
  },
  {
    "objectID": "chapter03.html#変数を作る再割り当てする",
    "href": "chapter03.html#変数を作る再割り当てする",
    "title": "4  Rによるデータハンドリング",
    "section": "4.5 変数を作る・再割り当てする",
    "text": "4.5 変数を作る・再割り当てする"
  },
  {
    "objectID": "chapter03.html#データの結合",
    "href": "chapter03.html#データの結合",
    "title": "4  Rによるデータハンドリング",
    "section": "4.7 データの結合",
    "text": "4.7 データの結合"
  },
  {
    "objectID": "chapter03.html#footnotes",
    "href": "chapter03.html#footnotes",
    "title": "4  Rによるデータハンドリング",
    "section": "",
    "text": "もちろんsd(dat) の一行で済む話だが，ここでは説明のために各ステップを書き下している。もっとも，sd関数で計算されるのは\\(n-1\\)で割った不偏分散の平方根であり，標本標準偏差とは異なるものである。↩︎"
  }
]