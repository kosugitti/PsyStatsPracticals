# Rの基礎

ここから実際にR/RStudioをつかった演習に入る。前回すでに言及したように，この講義ようのプロジェクトを準備し，RStudioはプロジェクトが開かれた状態であることを前提に話を進める。

## Rで計算

まずはRを使った計算である。Rスクリプトファイルを開き，最初の行に次の4行を入力してみよう。
各行を実行(Runボタン，あるいはctrl+enter)し，コンソールの結果を確認しよう。

```{r}
1 + 2
2 - 3
3 * 4
6 / 3
```

それぞれ加減乗除の計算結果が正しく出ていることを確認してほしい。なお，出力のところに`[1]`とあるのは，Rがベクトルを演算の基本としているからで，回答ベクトルの第1要素を返していることを意味する。

四則演算の他に，次のような演算も可能である。

```{r}
# 整数の割り算
8 %/% 3
# 余り
7 %% 3
# 冪乗
2^3
```


ここで，`#`から始まる行は**コメントアウト**されたものとして，実際にコンソールに送られても計算されないことに注意しよう。スクリプトが単純なものである場合はコメントをつける必要はないが，複雑な計算になったり，他者と共有するときは「今どのような演算をしているか」を逐一解説するようにすると便利である。

実践上のテクニックとして，複数行を一括でコメントアウトしたり，アンコメント(コメントアウトを解除する)したりすることがある。スクリプトを複数行選択した上で，Codeメニューから`Comment/Uncomment Lines`を押すとコメント/アンコメントを切り替えられるので試してみよう。また，ショートカットキーも確認し，キーからコメント/アンコメントができるように慣れておくと良い(Ctrl+↑+C/Cmd+↑+C)。

One more tips.コメントではなく，大きな段落的な区切り(セクション区切り)が欲しいこともあるかもしれない。Codeメニューの一番上に「Insert Section」があるのでこれを選んでみよう。ショートカットキーから入力しても良い(Ctrl+↑+R/Cmd+↑+R)。セクション名を入力するボックスに適当な命名をすると，スクリプトにセクションが挿入される。次に示すのがセクションの例である。

```{r}
# 計算 --------------------------------------------------------------
```

これはもちろん実行に影響を与えないが，ソースが長くなった場合はこのセクション単位で移動したり(スクリプトペインの左下)，アウトラインを確認したり(スクリプトペインの右上にある横三本線)できるので，活用して欲しい。

## オブジェクト

Rでは変数，関数などあらゆるものを**オブジェクト**としてあつかう。オブジェクトには任意の名前をつけることができる(数字から始まる名前は不可)。
オブジェクトを作り，そこにある値を**代入**する例は次の通りである。

```{r}
a <- 1
b <- 2
A <- 3
a + b # 1 + 2におなじ
A + b # 3 + 2におなじ
```

ここでは数字をオブジェクトに保管し，オブジェクトを使って計算をしている。大文字と小文字が区別されてるため，計算結果が異なることに注意。

代入に使った記号`<-`は「小なり」と「ハイフン」であるが，左矢印のイメージである。次のように，`=`や`->`を使うこともできる。

```{r}
B = 5
7 -> A
```

ここで，二行目に`7 -> A`を行った。先ほど`A <- 3`としたが，その後に`A`には7を代入し直したので，値は上書きされる。

```{r}
A + b # 7 + 2におなじ
```

このように，オブジェクトに代入を重ねると，警告などなしに上書きされることに注意して欲しい。似たようなオブジェクト名を使い回していると，本来意図していたものと違う値・状態を保管していることになりかねないからである。

ちなみに，オブジェクトの中身を確認するためには，そのままオブジェクト名を入力すれば良い。より丁寧には，`print`関数を使う。

```{r}
a
print(A)
```

あるいは，RStudioのEnvironmentタブをみると，現在Rが保持しているオブジェクトが確認でき，単一の値の場合はValueセクションにオブジェクト名と値を見ることができる。

注意点として，オブジェクト名として，次の名前は使うことができない。＞ break, else, for, if, in, next, function, repeat, return, while, TRUE, FALSE.

これらはRで特別な意味を持つ**予約語**と呼ぶ。特に`TRUE`と`FALSE`は真・偽を表すもので，大文字の`T`,`F`でも代用できるため，この一文字だけをオブジェクト名にするのは避けた方が良い。

## 関数

関数は一般に$y=f(x)$と表されるが，要するに$x$を与えると$y$に形が変わる作用のことを指す。
プログラミング言語では一般に，$x$を**引数(ひきすう,argument)**，$y$を**戻り値(もどりち,value)**という。以下，関数の使用例を挙げる。

```{r}
sqrt(16)
help("sqrt")
```

最初の例は平方根square rootを取る関数`sqrt`であり，引数として数字を与えるとその平方根が返される。第二の例は関数の説明を表示させる関数`help`であり，これを実行するとヘルプペインに関数の説明が表示される。

## 変数の種類

先ほどの`help`関数に与えた引数`"sqrt"`は文字列である。文字列であることを明示するためにダブルクォーテーション(`"`)で囲っている(シングルクォーテーションで囲っても良い)。このように，Rが扱う変数は数字だけではない。変数の種類は数値型(numeric)，文字型(character)，論理値(logical)の3種類がある。

```{r}
obj1 <- 1.5
obj2 <- "Hello"
obj3 <- TRUE
```

数値型は整数(integer)，実数(double)を含み[^2.1]，そのほか，複素数型(complex)，欠損値を表す`NA`，非数値を表す`NaN`(Not a Number)，無限大を表す`Inf`などがある。

[^2.1]: 実数はreal numberじゃないのか，という指摘もあろうかとおもう。ここでは電子計算機上の数値の分類である，倍精度浮動小数点数(double-precision floating-point number)の意味である。倍精度とは単精度の倍を意味しており，単精度は32ビットを，倍精度は64ビットを単位として一つの数字を表す仕組みのことである。

文字型はすでに説明した通りで，対になるクォーテーションが必要であることに注意してほしい。終わりを表すクォーテーションがなければ，Rは続く数字や文字も含めた「語」として処理する。この場合，enterキーを押しても文字入力が閉じられていないため，コンソールには「+」の表示が出る(この記号は前の行から入力が続いており，プロンプト状態ではないことを表している)。

また，文字型は当然のことながら四則演算の対象にならない。ただし，論理型の`TRUE/FALSE`はそれぞれ1,0に対応しているため，計算結果が表示される。次のコードを実行してこのことを確認しよう。

```{r}
#| eval: FALSE
obj1 + obj2
obj1 + obj3
```



## オブジェクトの型

ここまでみてきたように，数値や文字など(まとめて**リテラル**という)にも種類があるが，これをストックしておくものは全て**オブジェクト**である。オブジェクトとは変数のこと，と理解しても良いが，関数もオブジェクトに含まれる。

### ベクトル

Rのオブジェクトは単一の値しか持たないものではない。むしろ，複数の要素をセットで持つことができるのが特徴である。次に示すのは，**ベクトル**オブジェクトの例である。

```{r}
vec1 <- c(2, 4, 5)
vec2 <- 1:3
vec3 <- 7:5
vec4 <- seq(from = 1, to = 7, by = 2)
vec5 <- c(vec2, vec3)
```

それぞれのオブジェクトの中身を確認しよう。
最初の`c()`は結合combine関数である。また，コロン(`:`)は連続する数値を与える。
`seq`関数は複数の引数を取るが，初期値，終了値，その間隔を指定した連続的なベクトルを生成する関数である。

ベクトルの計算は要素ごとに行われる。次のコードを実行し，どのように振る舞うか確認しよう。

```{r}
vec1 + vec2
vec3 * 2
vec1 + vec5
```

最後の計算でエラーが出なかったことに注目しよう。たとえば`vec1 + vec4`はエラーになるが，ここでは計算結果が示されている(=エラーにはなっていない)。数学的には，長さの違うベクトルは計算が定義されていないのだが，`vec1`の長さは3，`vec5`の長さは6であった。**Rはベクトルを再利用する**ので，長いベクトルが短いベクトルの定数倍になるときは反復して利用される。すなわち，ここでは
$$ (2,4,5,2,4,5) + (1,2,3,7,6,5) = (3,6,8,9,10,10)$$
の計算がなされた。このRの仕様については，意図せぬ挙動にならぬよう注意しよう。

ベクトルの要素にアクセスするときは大括弧(`[ ]`)を利用する。
特に第二・第三行目のコードの使い方を確認しておこう。大括弧の中は，要素番号でも良いし，真/偽の判断でも良いのである。この真偽判断による指定の方法は，条件節(`if`文)をつかって要素を指定できるため，有用である。
```{r}
vec1[2]
vec2[c(1, 3)]
vec2[c(TRUE, FALSE, TRUE)]
```

ここまで，ベクトルの要素は数値で説明してきたが，文字列などもベクトルとして利用できる。

```{r}
words1 <- c("Hello!", "Mr.", "Monkey", "Magic", "Orchestra")
words1[3]
words2 <- LETTERS[1:10]
words2[8]
```

ここで`LETTERS`はアルファベット26文字が含まれている予約語ベクトルである。

ベクトルを引数に取る関数も多い。たとえば記述統計量である，平均，分散，標準偏差，合計などは，次のようにして計算する。

```{r}
dat <- c(12,18,23,35,22)
mean(dat) # 平均
var(dat)  # 分散
sd(dat)   # 標準偏差
sum(dat)  # 合計
```

他にも最大値`max`や最小値`min`，中央値`median`などの関数が利用可能である。

### 行列

数学では線形代数でベクトルを扱うが，同時にベクトルが複数並んだ二次元の行列も扱うだろう。
Rでも行列のように配置したオブジェクトを利用できる。

次のコードで作られる行列$A$,$B$がどのようなものか確認しよう。
```{r}
A <- matrix(1:6, ncol = 2)
B <- matrix(1:6, ncol = 2, byrow = T)
```

行列を作る関数`matrix`は，引数として要素，列数(`ncol`)，行数(`nrow`)，要素配列を行ごとにするかどうかの指定(`byrow`)をとる。ここでは要素を`1:6`としており，1から6までの連続する整数をあたえている。`ncol`で2列であることを明示しているので，`nrow`で行数を指定してやる必要はない。`byrow`の有無でどのように数字が変わっているかは表示させれば一目瞭然であろう。

与える要素が行数$\times$列数に一致しておらず，ベクトルの再利用も不可能な場合はエラーが返ってくる。

また，ベクトルの要素指定のように，行列も大括弧を使って要素を指定することができる。行，列の順に指定し，行だけ，列だけの指定も可能である。

```{r}
A[2, 2]
A[1, ]
A[, 2]
```

### リスト型

行列はサイズの等しいベクトルのセットであるが，サイズの異なる要素をまとめて一つのオブジェクトとして保管しておきたいときはリスト型をつかう。

```{r}
Obj1 <- list(1:4, matrix(1:6, ncol = 2), 3)
```

このオブジェクトの第一要素(`[[1]]`)はベクトル，第二要素は行列，第三要素は要素1つのベクトル(スカラー)である。オブジェクトの要素の要素(ex.第二要素の行列の2行3列目の要素)にどのようにアクセスすれば良いか，考えてみよう。

このリストは要素へのアクセスの際に`[[1]]`など数字が必要だが，要素に名前をつけることで利便性が増す。

```{r}
Obj2 <- list(
  vec1 = 1:5,
  mat1 = matrix(1:10, nrow = 5),
  char1 = "YMO"
)
```

この名前付きリストの要素にアクセスするときは，`$`記号を用いることができる。

```{r}
Obj2$vec1
```

これを踏まえて，名前付きリストの要素の要素にアクセスするにはどうすれば良いか，考えてみよう。

リスト型はこのように，要素のサイズ・長さを問わないため，いろいろなものを保管しておくことができる。統計関数の結果はリスト型で得られることが多く，そのような場合，リストの要素も長くなりがちである。リストがどのような構造を持っているかを見るために，`str`関数が利用できる。

```{r}
str(Obj2)
```

`str`関数の返す結果と同じものが，RStudioのEnvironmentタブからオブジェクトを見ることでも得られる。
また，リストの要素としてリストを持つ，すなわち階層的になることもある。そのような場合，必要としている要素にどのようにアクセスすれば良いか，確認しておこう。

```{r}
Obj3 <- list(Obj1,Second =Obj2)
str(Obj3)
```

### データフレーム型

リスト型は要素のサイズを問わないことはすでに述べた。しかしデータ解析を行うときは得てして，2次元スプレッドシートのような形式である。すなわち一行に1オブザベーション，各列は変数を表すといった具合である。このように矩形かつ，列に変数名を持たせることができる特殊なリスト型を**データフレーム型**という。以下はそのようなオブジェクトの例である。

```{r}
df <- data.frame(
  name = c("Ishino", "Pierre", "Marin"),
  origin = c("Shizuoka","Shizuoka","Hokkaido"),
  height = c(170, 180, 160),
  salary = c(1000, 20, 800)
)
# 内容を表示させる
df
# 構造を確認する
str(df)
```

ところで，心理統計の初歩としてStevensの尺度水準[@stevens1946]について学んだことと思う。そこでは数値が，その値に許される演算のレベルをもとに，名義，順序，間隔，比率尺度水準という4つの段階に分類される。間隔・比率尺度水準の数値は数学的な計算を施しても良いが，順序尺度水準や名義尺度水準の数字はそのような計算が許されない(ex.2番目に好きな人と3番目に好きな人が一緒になっても，1番好きな人に敵わない。)

Rには，こうした尺度水準に対応した数値型がある。間隔・比率尺度水準は計算可能なので`numeric`型でよいが，名義尺度水準は`factor`型(要因型，因子型とも呼ばれる)，順序尺度水準は`ordered.factor`型と呼ばれるものである。

factor型の変数の例を挙げる。すでに文字型として入っているものをfactor型として扱うよう変換するためには，`as.factor`関数が利用できる。

```{r}
df$origin <- as.factor(df$origin)
df$origin
```

要素を表示させて見ると明らかなように，値としては`Shizuoka`,`Shizuoka`,`Hokkaido`の3つあるが，レベル(水準)は`Shizuoka`,`Hokkaido`の2つである。このようにfactor型にしておくと，カテゴリとして使えて便利である。

次に示すのは順序つきfactor型変数の例である。
```{r}
# 順序付き要因型の例
ratings <- factor(c("低い", "高い", "中程度", "高い", "低い"), 
                  levels = c("低い", "中程度", "高い"), 
                  ordered = TRUE)
# ratingsの内容と型を確認
print(ratings)
```

集計の際などはfactor型と違わないため，使用例は少ないかもしれない。しかしRは統計モデルを適用する時に，尺度水準に対応した振る舞いをするものがあるので，データの尺度水準を丁寧に設定しておくのも良いだろう。

データフレームの要素へのアクセスは，基本的に変数名を介してのものになるだろう。たとえば先ほどのおオブジェクト`df` の数値変数に統計処理をしたい場合は，次のようにすると良い。

```{r}
mean(df$height)
sum(df$salary)
```

また，データフレームオブジェクトを一括で要約する関数もある。

```{r}
summary(df)
```

## 外部ファイルの読み込み

解析の実際では，データセットを手入力することはなく，データベースから取り出してくるか，別ファイルから読み込むことが一般的であろう。

統計パッケージの多くは独自のファイル形式を持っており，Rにはそれぞれに対応した読み込み関数も用意されているが，ここでは最もプレーンな形でのデータであるCSV形式からの読み込み例を示す。

提供されたサンプルデータ，`Baseball.csv`を読み込むことを考える。なおこのデータはUTF-8形式で保存されている[^2.2]。これを読み込むには，Rがデフォルトで持っている関数`read.csv`が使える。

```{r}
dat <- read.csv("Baseball.csv")
head(dat)
str(dat)
```

ここで`head`関数はデータフレームなどオブジェクトの冒頭部分(デフォルトでは6行分)を表示させるものである。また，`str`関数の結果から明らかなように，読み込んだファイルが自動的にデータフレーム型になっている。

ちなみに，サンプルデータにおいて欠損値に該当する箇所には`NA`の文字が入っていた。`read.csv`関数では，欠損値はデフォルトで文字列"NA"としている。しかし，実際は別の文字(ex.ピリオド)や，特定の値(ex.9999)の場合もあるだろう。その際は，オプション`na.strings`で「欠損値として扱う値」を指示すれば良い。

## おまけ；スクリプトの清書

さて，ここまでスクリプトを書いてきたことで，そこそこ長いスクリプトファイルができたことと思う。
スクリプトの記述については，もちろん「動けばいい」という考え方もあるが，美しくかけていたほうがなお良いだろう。「美しい」をどのように定義するかは異論あるだろうが，一般に「コード規約」と呼ばれる清書方法がある。ここでは細部まで言及しないが，RStudioのCodeメニューからReformat Codeを実行してみよう。スクリプトファイルが綺麗に整ったように見えないだろうか?

美しいコードはデバッグにも役立つ。時折Reformatすることを心がけよう。

## 課題

+ Rを起動し，新しいスクリプトファイルを作成してください。そのファイル内で，2つの整数を宣言し，足し算を行い，結果をコンソールに表示してください。

+ スクリプトに次の計算を書き，実行してください。
    + $\frac{5}{6} + \frac{1}{3}$
    + $9.6 \div 4$
    + $2.3 + \frac{1}{2}$
    + $3\times (2.2 + \frac{4}{5})$
    + $(-2)^4$
    + $2\sqrt{2} \times \sqrt{3}$
    + $2\log_e 25$

+ Rのスクリプトファイル内で，ベクトルを作成してください。ベクトルには1から10までの整数を格納してください。その後，ベクトルの要素の合計と平均を計算してください。ベクトルを合計する関数は`sum`，平均は`mean`です。

+ 次の表をリスト型オブジェクト`Tbl`にしてください。


| Name    | Pop  | Area   | Density |
|:--------|------:|-------:|--------:|
| Tokyo   | 1,403 |  2,194 |  6,397  |
| Beijing | 2,170 | 16,410 |  1,323  |
| Seoul   |   949 |    605 | 15,688  |

+ 先ほど作った`Tbl`オブジェクトの，東京(Tokyo)の面積(Area)の値を表示させてください(リスト要素へのアクセス)

+ `Tbl`オブジェクトの人口(Pop)変数の平均を計算してください。

+ `Tbl`オブジェクトをデータフレーム型オブジェクト`df2`に変換してください。新たに作り直しても良いですし，`as.data.frame`関数を使っても良い。

+ Rのスクリプトを使用して，`Baseball2022.csv` ファイルを読み込み，データフレーム`dat`に格納してください。ただし，このファイルの欠損値は$999$という数値になっています。

+ 読み込んだ`dat`の冒頭の10行を表示してみてください。

+ 読み込んだ`dat`に`summary`関数を適用してください。

+ このデータセットの変数`team`は名義尺度水準です。Factor型にしてください。他にもFactor型にすべき変数が2つありますので，それらも同様に型を変換してください。

+ このデータセットの変数の中で，数値データに対して平均，分散，標準偏差，最大値，最小値，中央値を
それぞれ算出してください。

+ 課題を記述したスクリプトファイルに対して，Reformatなどで整形してください。

[^2.2]: UTF-8というのは文字コードの一種で，0と1からなる機械のデータを人間語に翻訳するためのコードであり，世界的にもっとも一般的な文字コードである。しかしWindowsOSはいまだにデフォルトでShift-JISというローカルな文字コードにしているため，このファイルを一度Windows機のExcelなどで開くと文字化けし，以下の手続が正常に作用しなくなることがよくある。本講義で使う場合は，ダウンロード後にExcelなどで開くことなく，直接Rから読み込むようにされたし。



## References

::: {#refs}
:::
