# Rでプログラミング

ここではプログラミング言語としてのRについて解説する。
なお副読本として@kosugi2023 を挙げておく。また，プログラミングのより専門的な理解のために，@Jared_P_Lander2018-12-28, @Ren_Kun2017-11-23, @Hadley_Wickham2016-02-10 なども参考にすると良い。

プログラミング言語は，古くはCやJava，最近ではPythonやJuliaなどがよく用いられている。Rも統計パッケージというよりプログラミング言語として考えるのが適切かもしれない。Rは他のプログラミング言語に比べて，変数の型宣言を事前にしなくても良いことや，インデントなど書式についておおらかなところは，初心者にとって使いやすいところだろう。一方で，ベクトルの再利用のところで注意したように([Section @sec-vector 参照])，不足分を補うために先回りして補填されたり，この後解説する関数の作成時に明示的な指定がなければ環境変数を参照する点など，親切心が空回りするところがある。より厳格な他言語になれていると，こうした点はかえって不便に思えるところもあるかもしれない。総じて，R言語は初心者向けであるといえるだろう。

さて，世にプログラミング言語は多くあれど[^5.1]，その全てに精通する必要はないし，不可能である。それよりも，プログラミング言語一般に通底する基本的概念を知り，あとは各言語による「方言」がある，と考えた方が生産的である。その基本的概念を3つ挙げるとすれば，「代入」「反復」「条件分岐」になるだろう。

[^5.1]: @Language2016 には117種もの計算機言語が紹介されている。

## 代入

代入は，言い換えればオブジェクト(メモリ)に保管することを指す。これについては既に @sec-Rbase で触れた通りであり，ここでは言及しない。オブジェクトや変数の型，常に上書きされる性質に注意しておけば十分だろう。

一点だけ追加で説明しておくと，次のような表現がなされることがある。

```{r, override}
a <- 0
a = a + 1
print(a)
```

ここではあえて，代入記号として`=`を使った。2行目に`a = a + 1` とあるが，これを見て数式のように解釈しようとすると混乱する。数学的には明らかにおかしな表現だが，これは上書きと代入というプログラミング言語の特徴を使ったもので，「(いま保持している)`a`の値に1を加えたものを，(新しく同じ名前のオブジェクト)`a`に代入する(=上書きする)」という意味である。この方法で，`a` をカウンタ変数として用いることがある。誤読の可能性を下げるため，この授業においては代入記号を`<-`としている。

このオブジェクトを上書きするという特徴は多くの言語に共通したものであり，間違いを避けるためには，オブジェクトを作る時に初期値を設定することが望ましい。先の例では，代入の直上で`a <- 0`としており，オブジェクト`a` に`0` を初期値として与えている。この変数の初期化作業がないと，以前に使っていた値を引き継いでしまう可能性があるので，今から新しく使う変数を作りたいというときは，このように明示しておくといいだろう。

なお，変数をメモリから明示的に削除する場合は，`remove`関数を使う。

```{r}
remove(a)
```

これを実行すると，RStudioのEnvironmentタブからオブジェクト`a`が消えたことがわかるだろう。
メモリの一斉除去は，同じくRStudioのEnvironmentタブにある箒マークをクリックするか，`remove(list=ls())`とすると良い[^5.2]。

[^5.2]: `ls()`関数はlist objectsの意味で，メモリにあるオブジェクトのリストを作る関数

## 反復

### for文

電子計算機の特徴は，電源等のハードウェア的問題がなければ疲労することなく計算を続けられるところにある。人間は反復によって疲労が溜まったり，集中力が欠如するなどして単純ミスを生成するが，電子計算機にそういったところはない。

このように反復計算は電子計算機の中心的特徴であり，細々した計算作業を指示した期間反復させ続けることができる。反復の代表的なコマンドは`for`であり，forループなどと呼ばれる。forループはプログラミングの基本的な制御構造であり，R言語の`for`ループの基本的な構文は次のようになる：

```
for (value in sequence) {
    # 実行するコード
}
```

ここの`value`は各反復で`sequence`の次の要素を取る反復インデックス変数である。。`sequence`は一般にベクトルやリストなどの配列型のデータであり，「#実行するコード」はループ体内で実行される一連の命令になる。

以下は`for`文の例である。

```{r, forLoopExam}
for (i in 1:5) {
  cat("現在の値は", i, "です。\n")
}
```

`for` 文は続く小括弧のなかである変数を宣言し(ここでは`i`)，それがどのように変化するか(ここでは`1:5`，すなわち1,2,3,4,5)を指定する。続く中括弧の中で，反復したい操作を記入する。今回は`cat` 文によるコンソールへの文字力の出力を行っている。ここでのコマンドは複数あってもよく，中括弧が閉じられるまで各行のコマンドが実行される。

次に示すは，`sequence`にあるベクトルが指定されているので，反復インデックス変数が連続的に変化しない例である。

```{r, forLoopExam2}
for(i in c(2,4,12,3,-6)){
  cat("現在の値は", i, "です。\n")
}
```

また，反復はネスト(入れ子)になることもできる。次の例を見てみよう。

```{r, forLoopExam3}
# 2次元の行列を定義
A <- matrix(1:9, nrow=3)

# 行ごとにループ
for(i in 1:nrow(A)) {
    # 列ごとにループ
    for(j in 1:ncol(A)) {
        cat("要素 [", i, ", ", j, "]は ", A[i, j], "\n")
    }
}
```

ここで，反復インデックス変数が`i`と`j`というように異なる名称になっていることに注意しよう。例えば今回，ここで両者を`i`にしてしまうと，行変数なのか列変数なのかわからなくなってしまう。また少し専門的になるが，R言語は`for`文で宣言されるたびに，内部で反復インデックス変数を新しく生成している(異なるメモリを割り当てる)ためにエラーにならないが，他言語の場合は同じ名前のオブジェクトと判断されることが一般的であり，その際は値が終了値に到達せず計算が終わらないといったバグを引き起こす。反復に使う汎用的な変数名として`i,j,k`がよく用いられるため，自身のスクリプトの中でオブジェクト名として単純な一文字にすることは避けた方がいいだろう。

### while文

whileループはプログラミングの基本構造であり，特定の条件が真（True）である間，繰り返し一連の命令を実行する。「"while"（～する間）」という名前から直感的に理解できるだろう。

R言語のwhileループの基本的な構文は次のようになる：

```
while (condition) {
    # 実行するコード
}
```

ここで，「condition」はループが終了するための条件である。「# 実行するコード」はループ体内で実行される一連の指示である。たとえば，1から10までの値を出力する`while`ループは以下のように書くことができる：

```{r,whileExample}
i <- 1
while (i <= 10) {
    print(i)
    i <- i + 1
}
```

このコードでは，「i」が10以下である限りループが続く。「print(i)」で「i」の値が印刷され，「i <- i + 1」で「i」の値が1ずつ増加する。これにより，「i」の値が10を超えると条件が偽（False）となり，ループが終了する。

whileループを使用する際の一般的な注意点は，無限ループ（終わらないループ）を避けることである。これは，conditionが常に真（True）である場合に発生する。そのような状況を避けるためには，ループ内部で何らかの形でconditionが最終的に偽（False）となるようにコードを記述することが必要である。

また，R言語は他の多くのプログラミング言語と異なり，ベクトル化された計算を効率的に行う設計がされている。したがって，可能な限りforループやwhileループを使わずに，ベクトル化した表現を利用すれば計算速度を上げることができる。

## 条件分岐
## 自作関数


## さまざまな乱数
## 確率分布の関数


## References

::: {#refs}
:::
