# Let's Start with R/RStudio

"R". This single character is notoriously difficult to search for, as it denotes a programming language specialized for statistics. This language is widely used across various fields of study related to statistics, including psychology. As a free software, or more accurately an open and free software, its source code is public, allowing anyone to use it for free. However, free here means without compensation, not without cost. The lack of compensation implies that the accuracy of calculations and scientific validity is not guaranteed by monetary paymentâ€”a fairly reasonable understanding. Let us nurture both science and software openly as they are shared assets of mankind.

In Japan, R is active in community activities, and voluntary study groups made up of R users are being held in various parts of Japan, centered on Tokyo.R[^1.1]. Like how R itself is published through the Internet, various materials from introduction to application can be utilized online. The following explains from the introduction, but as it is frequently updated, we suggest that you search as needed and select and use information that is as close as possible to the timeline.

As of January 2024, there are local communities not only in Tokyo but also in Fukuoka, Sapporo, Yamaguchi, Iruma, etc., where all participants are enjoying themselves.


## Preparation of the Environment

### Installing R

There are online materials available that are beginner-friendly for installing R.

R is published on a network known as the Comprehensive R Archive Network (CRAN)[^1.2]. On the CRAN homepage, there are download links available. Download the latest version that suits your platform[^1.3].

[^1.2]: CRAN is pronounced "See-ran" or "Cran". The author is from the "See-ran" camp.
If you've installed R on your own PC for this class and more than half a year has passed before you use it again, it's better to start by checking for the latest version, uninstalling the old version if it's updated, and installing the latest one. Some packages used in R may only be compatible with the new version. Like tatami mats, newer is better in R.

### Installation of RStudio

Once the installation of R is complete, let's proceed to install RStudio.
RStudio is what is known as an integrated development environment (IDE). R on its own has the analytical capabilities to handle specialist usage, such as statistical analysis and function plotting. Its essence, of course, is the computation function; it provides the necessary responses when given command statements (scripts) to execute calculations. Even if the essence of analysis is the computation function, actual analytical activities include various peripheral activities related to analysis, such as drafting and finalizing scripts, generating and managing input/output data and drawing files, and managing packages (explained below). To put it in metaphorical terms, even if the essence of cooking is processing with a knife, cutting board, and stove, the actual preparation process goes more smoothly if there are convenient cooking utilities, such as a spacious cooking space, a convenient sink, and support cooking utensils like bowls and containers.
In a way, doing analysis in R alone is like cooking with a simple and wild method like a mess tin, and RStudio is something that provides an overall cooking environment.

As said over and over again, it is essentially possible to work on a single R. If you want to maintain as simple an environment as possible, it is not denied to use a single R, but since RStudio is also useful as an editor and document creation software, we will assume the use of RStudio in this class[^1.4].

It is possible to use it from an editor like VSCode, and it is also possible to make the calculation engine of Jupyter Notebook R. Recently, it has become more common to provide analytical software as an environment instead of preparing it individually. For example, you can now make the engine of Google Colaboratory R. The day may soon come when creating your own environment on your local PC becomes outdated.

Introduction site for environment setup

Here are some web-based instructional materials available as of the time of writing (January 2024) for reference when installing. Please refer to the ones that are suitable for you and install R and RStudio in your PC environment. Of course, you are also free to search for "R RStudio Installation" on your own, or even consult with chatGPT.

#### For Windows

+ "Tokyo University Graduate School of Agricultural and Life Sciences Agri-Bioinformatics Education and Research Program [PDF Document](https://www.iu.a.u-tokyo.ac.jp/textbook/R/R1.010_win.pdf)"
[Installation Guide for Beginners in R](https://syunsuke.github.io/r_install_guide_for_beginners/)
I'm sorry but you seem to have pasted a URL, not a block of Japanese text. I can translate Japanese text to English, but I can't translate the content of a webpage for you. Can you please provide the text you'd like to have translated?
My apologies, you didn't provide a Japanese text for me to translate. Could you please provide the text?
Professor Haruhiko Okumura's [page](https://okumuralab.org/~okumura/stat/R-win.html).


I'm sorry, you haven't provided any Japanese text. Please provide the text you want translated.

[PDF document](https://www.iu.a.u-tokyo.ac.jp/textbook/R/R1.010_mac.pdf) provided by the Agribioinformatics Education and Research Program, Graduate School of Agricultural and Life Sciences, The University of Tokyo.
Apologies, but it seems like the text you want to be translated is missing. Could you please provide the Japanese text you'd like me to translate?
Sure, I can help translate that. It translates to: 

"The Easiest, Medical Statistics [Article](https://best-biostatistics.com/r/rstudio_start.html#i-3)"


In addition, on a Mac, it can be installed using package management software such as Homebrew (which is recommended). In that case, please refer to the documents below.

As an AI model developed by OpenAI, I currently can't access external web links or browse the web. However, I can certainly help you translate any Japanese text if you are able to directly copy and paste it into our conversation.
"Mr. Koara Sabao's note [article](https://note.com/mackerelman/n/nfbf8054e90d5)"
I'm sorry, but I can't see any Japanese text in your message. Please provide the text you want me to translate.
You haven't provided the Japanese text that you would like translated to English. Please provide the text.


## Basics of RStudio (Four Panes)

Assuming you are ready to use R and RStudio at this point.

Now, when you launch RStudio, a screen divided into four major areas appears. These areas are called **panes**. There may be times when 'Area 1' in the figure does not appear, but this is only because the pane below is maximized and collapsed, so it will likely appear if you operate the size change button on the top of the pane.

As an AI, I'm unable to view images. Could you please provide the Japanese text you'd like translated into English?

The layout of this pane can also be changed from Tools > Global Options... > Pane Layout in the menu. While it is basically four divisions, it is a good idea to change the layout to a position that is easy for you to use.

Sorry for the misunderstanding, but as an AI text-based system, I'm unable to translate images. You can type out the Japanese text or provide an image description for me to provide the appropriate translation.

Below is a brief explanation of what each pane (region) does.

You forgot to provide the Japanese text that you want to translate into English. Could you please provide it?

Editor area. This pane is basically what you write in when inputting R scripts, report text, etc. As you can see from File > New File, the types of files you can work with here are not only R language, but also C language, Python language scripts, markup languages such as Rmd, md, Qmd, HTML, and special languages such as Stan and SQL. Be sure to check the bottom-right corner of the pane to see the type of file currently open.

Let's explain with an example of writing a script in R language. R is an interpreter that executes commands sequentially, and you use it to send the R code described here to the console to execute calculations with the Run button in the upper right. We call a single command a command, and the entire stack of commands a script or program. If you want to execute multiple commands, select multiple lines in the edit area and press the Run button. If you want to execute the entire script file, press Source next to the Run button. CTRL+Enter (Command+Enter on a Mac) acts as a shortcut for the Run button.

Sure, the translation of this Japanese text into English would be: "Area 2; Console Pane."

If you are using R alone, this pane is what you will use. In other words, what is shown here is the main body of R, or rather the computing function of R itself. The place where the ">" symbol is displayed is called a prompt, and R is waiting for input when the prompt is displayed.

R performs calculations sequentially, so if you enter a command when the prompt is on, the calculation result will be returned.
It's fine to write commands directly here, but there may be typos, and it's more common for commands to span multiple lines, so it's better to plan on transcribing them in the editor area. Occasionally, when there's something you want to check temporarily, it's a good idea to touch the console directly.

Additionally, if you want to clean the console, it is good to press the broom button on the top right.

Area 3; Environment Pane

Basically, this pane and the next area 4 pane contain multiple tabs. You can also customize which tabs to include in which pane in the Pane Layout to your liking. Here we will only mention about the typical two tabs.

The "Environment" tab displays variables and functions stored in the R execution memory. These "variables and functions" are collectively referred to as "objects", and you can check their contents and structure in the GUI here.

The "History" tab is a record. All the commands that have been sent to the console are recorded in order here. From the History tab, it's also possible to send commands to the editor and console, which is useful when you want to run the same command again.

As an assistant, I'm able to translate your text but there isn't any given Japanese text in your request. Could you please provide the text you want to be translated into English?

Only the representative tabs will be explained here.

The "Files" tab is a file operation screen, similar to Finder on Mac and Explorer on Windows. It allows for operations such as creating folders, deleting files, renaming, copying, and so on.


The "Plot" tab shows the result when a drawing command is given in the R command. One of the advantages of RStudio is that you can export the figure from this Plot to a file, and you can specify the file size and file format at that time.

The **Packages** tab displays a list of loaded packages and stored packages (even those not loaded). When introducing a new package, it can be done from the install button here, and updates of stored packages can also be done with a single button. We will discuss the packages in detail later.

The **Help** tab is the area where the results of the command to display help with R commands (`help` function) are displayed. By using help, you can refer to function arguments, return values, usage examples, etc.

Other Tabs

Additionally, I will briefly explain some tabs that seem to have optional display settings.

You would refer to the "Connections" tab when connecting R to an external database, etc. When you're doing operations like extracting only the necessary tables with SQL without importing all the large-scale data locally, you'll need it.

The **Git** tab is used when managing versions of R, especially R projects (described later). Git is a management system for developing programs simultaneously by multiple programmers. Since it is a system that specializes in recording chronological differences, it can be used as a lab notebook record if applied when creating reports.

The **Build** tab is used when building R packages or websites. This document was also created using RStudio, and this tab is used when generating (converting from manuscripts to HTML or PDF) the document.

The "Tutorial" tab is the tab for enjoying the tutorial tour.

The **Viewer** tab is a tab used to view HTML, PDF, etc. created in RStudio.

The "Presentation" tab is a tab to view presentations created in RStudio.

The "Terminal" tab is the terminal that is known in Windows/Mac, and is the terminal in Linux. It is used when giving commands to the OS through the command line, not limited to R.

The **Background Jobs** tab is used, as the name suggests, when you want to have work done in the background. R essentially executes calculations on a single core, but by using this tab to run script files in the background, parallel operations become possible.

## R's Package

R can perform basic analyses such as linear models on its own, but if you want to use more advanced statistical models, you will need to introduce specialized **packages**. Packages are groups of functions, and these are also provided over the internet through CRAN and Github. By the way, there are 344,607 packages available just on CRAN[^1.5], and there are also many packages available on Github[^1.6] and other platforms, not through CRAN.

As of January 18, 2024

Git is a version control system, and Github is a service that manages these versions on a server (repository) over the Internet. RStudio can also link with Github, allowing for easy version control by associating projects with Github. Moreover, as mentioned here, packages can also be published on Github. Therefore, in recent times, Github, which allows for publishing without waiting for CRAN's review, is also preferred.

When using a package, you must first install the package file locally. Then, for each time you start R (for each session), you use the package by calling it with the `library` function. Note that there is no need to install it every time.

Installation is possible with R commands, but it might be easier to use RStudio's Packages pane for installation. Below, I list some famous and useful package names and their brief descriptions. Some will be used in this lecture, so it is desirable to prepare them in advance.

The *tidyverse* package [@tidyverse]; R has become dramatically easier to use since the introduction of the tidyverse package. The developer, Hadley Wickham, is revered as a god in the R community, and he has had a big impact on the industry. This package is a "group of packages," a "package of packages," and tidyverse means something like a tidy (well-organized) verse (world). This package does not provide statistical analysis models, but provides useful functions for the **preprocessing** of data that comes before it[^1.7]. Installing this package will bring in related dependency packages one after another, which can take some time.
The *psych* package [@psych]; as the name implies, it contains many statistical models related to psychological statistics. Especially special correlation coefficients and factor analysis models are very useful, so there is no mistake in installing it.
"GPArotation" package [@GPArotation]; a package used for factor axis rotation in factor analysis.
+ *styler* package; A package that sorts out the style. Convenient for scripting draft.
The *lavaan* package [@lavaan]; This is a package for analyzing models that include latent variables (LAtent VAriable ANalysis), in other words, it is used for conducting Structural Equation Modeling (SEM, also known as covariance structure analysis).
The "*ctv*" package[@CTV]; short for CRAN Task Views, this package helps you find the necessary packages from the vast CRAN. It groups and installs packages that are likely related to a certain genre. For example, after installing this package, typing `install.views("Psychometrics")` will install many packages related to psychometrics one after another.
The *cmdstanr* package [@cmdstanr]; a package that enables the use of the probabilistic programming language Stan, which is used in complex statistical models, from R. In addition to this package, preparation of Stan and the compilation environment is necessary for introduction, so please refer to the [official introduction site](https://mc-stan.org/cmdstanr/articles/cmdstanr.html) as well.

In fact, most of the time in analyzing statistical data is spent on the "preprocessing" of shaping the data into a form suitable for analysis. How well, quickly, and intuitively you can do preprocessing, also known as data handling, is such an important step that it affects subsequent analysis, so the appearance of the tidyverse package was welcomed. The specialized book @Kinosady2021 on data handling using this has been so valuable.


## RStudio Projects

Before we actually start using R, let's explain about Projects in RStudio as a final preparation.

You might also use a PC to create and store documents, often putting them together in a folder. Folders are usually organized hierarchically, for example, "Documents" > "Psychology" > "Psychology Statistics Workshop". By doing so, you can quickly access the necessary files.

Conversely, if you do not manage folders in this way, files will be scattered throughout your PC, and you may have to search the contents of your PC each time you need information.

The same applies to practical analysis using R/RStudio, where each theme involves multiple files (such as script files, data files, image files, report and other document files, etc.), and these are managed in folders according to the scene (such as "classes", "graduation thesis", etc.).

Furthermore, there is a concept called a working directory in the PC environment[^1.8]. For example, when you're launching and running R/RStudio, it indicates where R is currently being executed and where it is managed. If, for instance, there's a file called `sample.csv` in this working directory and you want to import it from the script, you can simply write the file name. However, if the file is saved somewhere else, you need to either provide instructions that include the position relative to the working directory (relative path), or you need to provide instructions that include the absolute path from the perspective of the entire PC environment. The difference between relative and absolute paths can be thought of as the difference between giving directions like "two corners from here, turn right" and giving an address.

At any rate, you always have to keep an eye on where this work folder is set up when you're running. Please note that this working folder is **not necessarily** the same one that's open on the Files tab of the RStudio file pane. Just because you've opened it in Explorer/Finder on the GUI, does not mean that the working folder automatically switches.

This is a project in RStudio. RStudio has a concept of "project", where you can manage things like work folders and environment settings. When you start a new project, you go to File > New Project, and when you already have a created project, you open the project file (a file with the .proj extension) through File > Open Project. Then, the working directory is set to that folder. If you link the project to Git, you can also perform version control on a per-folder basis.

From now on, please note that when referring to external files in this lecture, we will discuss them as if they are inside the project folder (in a form that does not require a path).

Here, you can think of folders and directories as the same thing. Generally, the term directory is preferred in CUI, and folder is preferred in GUI. As suggested by the root word "direct", a directory emphasizes the specific destination such as a file or access destination, and a folder is something that incorporates a group of files and other things. The term folder is easier to understand.

## Assignment

Please download the latest version of R from CRAN and install it on your PC.
Please download the desktop version of RStudio from [Posit's website](https://posit.co/download/rstudio-desktop/) and install it on your PC.
Launch RStido and try rearranging the pane layout from the default state. It might also be good to set the source pane to three columns.
Please try to erase all the characters written in the console pane.
Please try opening various folders using the Files tab in the file pane, deleting unnecessary files, and changing file names.
Open the Files tab in the file pane, and select and run 'Go To Working Directory' from 'More'. Did anything happen?
Please create a new project for this class. The project can be a new folder or an existing folder, it doesn't matter.
When you have a project open, the name of the project should be displayed somewhere in the RStudio window or tab. Please check.
Please perform various file operations from the Files tab in the file pane, and then do `Go To Working Directory` again. If you can get back into the project folder, you have succeeded.
Open a new R script file, it's fine as blank, please save it with a filename.
Please exit or minimize RStudio, and navigate to the project folder from the OS Explorer/Finder. Please confirm that the file you just created is saved there.
In the project folder, there should be a file named project name + `.proj`. Please open this and open the RStudio project.
Please close the project from File > Close Project in RStudio. Check what has changed in the details of the screen.
Please exit RStudio and then restart it. You can start it either from the project file or from the application. After starting, please open the project (or make sure the project is open).

