# Fundamentals of R {#sec-Rbase}

Now, we'll get into practices using R/RStudio. As previously mentioned, we've prepared a project specifically for this lecture and we will proceed under the assumption that the RStudio project is open.

## Calculations with R

Let's start with calculations using R. Open the R script file, and try entering the following four lines in the first row.
Execute each line (using either the "Run" button, or "ctrl+enter") and verify the results in the console.

```{r}
1 + 2
2 - 3
3 * 4
6 / 3
```

Please verify that each calculation for addition, subtraction, multiplication, and division is correct. Additionally, the presence of `[1]` in the output is because R treats vectors as basics for operations, indicating that it's returning the first element of the response vector.

In addition to basic arithmetic operations, the following calculations are also possible.

```{r}
# 整数の割り算
8 %/% 3
# 余り
7 %% 3
# 冪乗
2^3
```


Take note here, lines starting with `#` are **commented out**, which means they will not be calculated even if sent to the console. There is no need to add comments when the script is simple, but it's helpful to continuously explain 'what operation is being performed at the moment' when dealing with complex calculations or sharing with others.

As a practical technique, you may sometimes want to comment out, or uncomment (remove the comment out from), multiple lines at a time. Try selecting several lines in your script, then pressing `Comment/Uncomment Lines` in the Code menu, which allows you to toggle between commenting and uncommenting. Moreover, it's a good idea to familiarize yourself with the shortcut keys for commenting/uncommenting (Ctrl+Shift+C/Cmd+Shift+C). This will not only save you time but also streamline your coding process.

Here’s another tip. There might be times when you want not just a comment, but a larger, paragraph-like break (a section break). You can achieve this by selecting 'Insert Section' at the top of the Code menu. You can also use shortcut keys to do this (Ctrl+↑+R/Cmd+↑+R). If you provide a suitable name in the box for entering the section name, it will be inserted into the script. The following is an example of a section.

```{r}
# 計算 --------------------------------------------------------------
```

While it doesn't affect the execution itself, when the source code becomes long, you can move section by section (from the bottom left corner of the script pane) or check the outline (from the triple line icon in the top right corner of the script pane), so you are encouraged to utilize these features.

## Objects

In R, everything such as variables and functions is treated as an **object**. You can give any name to objects (names starting with a number are not allowed).
An example of creating an object and **assigning** a value to it is as follows.

```{r}
a <- 1
b <- 2
A <- 3
a + b # 1 + 2におなじ
A + b # 3 + 2におなじ
```

Here, we are storing numbers in objects and using these objects to perform calculations. Please note that upper and lower case letters are distinguished, so the calculation results may vary.

The symbol `<-` used for assignment is composed of ‘less than’ sign and a 'hyphen', but it can be thought of as a leftward arrow. In the same vein, you can also use `=` or `->`.

```{r}
B <- 5
7 -> A
```

Here, we performed `7 -> A` on the second line. Previously, we did `A <- 3`, but since we reassigned `A` to 7 afterwards, the value is overwritten.

```{r}
A + b # 7 + 2におなじ
```

In this manner, when you repeatedly assign variables to an object, please note that they can be overwritten without any warning. This is because, if you cycle through similar object names, you might end up storing values or statuses that are different from what you originally intended.

By the way, if you want to check the contents of an object, you simply need to type in the object name. To do this more precisely, you can use the `print` function.

```{r}
a
print(A)
```

Alternatively, by examining the Environment tab in RStudio, you can verify the objects currently held in R. For single values, you can see the object name and values in the Value section.

As a cautionary note, the following names cannot be used as object names: break, else, for, if, in, next, function, repeat, return, while, TRUE, FALSE.

These are referred to as **reserved words** that have a special meaning in R. Notably, `TRUE` and `FALSE` represent true and false values, and can be substituted with the capital letters `T` and `F`. Therefore, it's best to avoid using these single letters as object names.

## Functions

Functions are generally expressed as $y=f(x)$, which essentially refers to the operation that transforms $x$ into $y$.
In programming languages, $x$ is generally referred to as an **argument**, while $y$ is called the **return value**. Below are some examples of how to use functions.

```{r}
sqrt(16)
help("sqrt")
```

The first example is the square root function `sqrt`, which returns the square root of a number when given it as an argument. The second example is the `help` function, which displays the description of a function. When executed, the description of the function is displayed in the help pane.

## Types of Variables

The argument `"sqrt"` that we gave to the `help` function earlier is a string. It's enclosed in double quotation marks (`"`) to make it clear that it's a string (though it can also be enclosed in single quotation marks). Like this, the variables that R handles are not just numbers. There are three types of variables: numeric, character, and logical.

```{r}
obj1 <- 1.5
obj2 <- "Hello"
obj3 <- TRUE
```

Numerical types include both integers (integer) and real numbers (double) [^2.1], and others such as complex number type (complex), `NA` representing missing values, `NaN` (Not a Number) indicating non-numerical values, and `Inf` representing infinity.

[^2.1]: You may wonder why "real numbers" aren't referred to as "real numbers". Here, "real number" refers to double-precision floating-point numbers - a category of numbers on electronic computers. "Double-precision" means twice the precision of "single-precision". Single-precision uses 32 bits, while double-precision uses 64 bits to represent a single number.


As mentioned before, string types require paired quotations, so please be mindful of this. If a quotation marking the end of a string is missing, R will treat the following numbers and characters as part of the 'word'. In this case, pressing the enter key does not close the character input, indicating a '+' symbol in the console (this symbol means that the input is continuing from the previous line, indicating that it is not in a prompt state).

Moreover, it goes without saying that string types cannot be subjected to arithmetic operations. However, logical types `TRUE/FALSE` correspond to 1 and 0 respectively, therefore they can be included in calculations and the results can be displayed. Let's confirm this by executing the following code.

```{r}
#| eval: FALSE
obj1 + obj2
obj1 + obj3
```



## Types of Objects

As we have seen so far, there are various types of literals, such as numbers and characters. Everything that stores these is called an **object**. You may think of an object as a variable, but functions are also included in objects.

### Vector {#sec-vector}

R objects don't just hold a single value. Rather, a key feature is they can host a set of multiple elements. The following is an example of a **vector** object.

```{r}
vec1 <- c(2, 4, 5)
vec2 <- 1:3
vec3 <- 7:5
vec4 <- seq(from = 1, to = 7, by = 2)
vec5 <- c(vec2, vec3)
```

Let's check the contents of each object.
The initial `c()` is a combine function. Moreover, the colon (`:`) gives consecutive numbers.
The `seq` function takes multiple arguments, but essentially, it's a function that generates a continuous vector by specifying the initial value, the end value, and the interval in between.

Calculations involving vectors are performed on an element-by-element basis. Let's run the following code and check how it behaves.

```{r}
vec1 + vec2
vec3 * 2
vec1 + vec5
```

Pay attention to the fact that there were no errors in the final computation. For instance, `vec1 + vec4` would result in an error, yet here, the calculation results are displayed (meaning there is no error). Mathematically, calculations are not defined for vectors of different lengths, yet the length of `vec1` is 3, and the length of `vec5` is 6. **In R, vectors are recycled**, which means when a longer vector is a multiple of a shorter vector, it is used repetitively. In other words, in this case:
You just added two vectors in R! The equation in the above R chunk allocates values to two different vectors: (2,4,5,2,4,5) and (1,2,3,7,6,5). When these vectors are added, the corresponding elements in each vector are summed up, resulting in a new vector: (3,6,8,9,10,10).
The calculations have been made. Be careful with this R specification, to avoid unintended actions.

When accessing the elements of a vector, use square brackets (`[ ]`).
Let's pay special attention to the usage of code in the second and third lines. Inside the brackets, you can use either element numbers or Boolean judgments. This method of specifying through Boolean judgments is useful, as it allows us to select elements using conditional clauses (`if` statements).
```{r}
vec1[2]
vec2[c(1, 3)]
vec2[c(TRUE, FALSE, TRUE)]
```

Up until now, we have explained vector elements using numbers. However, it's worth noting that strings can also be used as vectors.

```{r}
words1 <- c("Hello!", "Mr.", "Monkey", "Magic", "Orchestra")
words1[3]
words2 <- LETTERS[1:10]
words2[8]
```

Here, `LETTERS` is a reserved vector that contains all 26 letters of the alphabet.

There are many functions that take vectors as arguments. For instance, descriptive statistics such as mean, variance, standard deviation, and total can be calculated as follows.

```{r}
dat <- c(12, 18, 23, 35, 22)
mean(dat) # 平均
var(dat) # 分散
sd(dat) # 標準偏差
sum(dat) # 合計
```

There are also functions available for other calculations, such as maximum `max`, minimum `min`, and median `median`.

### Matrix

In mathematics, linear algebra deals with vectors, but it also handles two-dimensional matrices, which consist of multiple vectors aligned together.
You can also use objects arranged like matrices in R.

Let's check what the matrices $A$ and $B$ created by the following code are like.
```{r}
A <- matrix(1:6, ncol = 2)
B <- matrix(1:6, ncol = 2, byrow = T)
```

The `matrix` function, which is used to create matrices, accepts arguments such as elements, number of columns (`ncol`), number of rows (`nrow`), and whether to arrange elements by row (`byrow`). In this case, the elements are specified as `1:6`, thus providing a sequence of consecutive integers from 1 to 6. Since `ncol` explicitly states that there are two columns, it is not necessary to specify the number of rows with `nrow`. How the numbers change with or without the `byrow` specification is obvious at a glance when displayed.

If the given elements do not match the number of rows times the number of columns, and reuse of the vector is not possible, an error will be returned.

Additionally, just like with vector element specification, you can specify matrix elements using brackets. Specify in the order of rows and columns, and it is also possible to specify only a row or only a column.

```{r}
A[2, 2]
A[1, ]
A[, 2]
```

### List Types

A matrix is a set of vectors of equal size. However, when we want to store elements of different sizes together as a single object, we use a list type.

```{r}
Obj1 <- list(1:4, matrix(1:6, ncol = 2), 3)
```

The first element (`[[1]]`) of this object is a vector, the second element is a matrix, and the third element is a single-element vector (scalar). Let's think about how we can access the elements within these elements (for example, the element at the second row and third column of the matrix that is the second element of the object).

This list requires numbers such as `[[1]]` when accessing elements. However, convenience can be increased by assigning names to these elements.

```{r}
Obj2 <- list(
  vec1 = 1:5,
  mat1 = matrix(1:10, nrow = 5),
  char1 = "YMO"
)
```

When accessing the elements of this named list, you can use the `$` symbol.

```{r}
Obj2$vec1
```

With this in mind, let's think about how we can access elements within elements of a named list.

A list type, as the name suggests, can store a variety of items, and doesn't restrict the size or length of its elements. The results of statistical functions are often obtained as list types, and in such cases, the list tends to have quite a few elements. You can use the `str` function to check the structure of a list.

```{r}
str(Obj2)
```

The results returned by the `str` function can also be obtained by viewing the object from the Environment tab in RStudio.
Also, a list sometimes contains other lists as elements, creating a hierarchical structure. In such cases, make sure to understand how to access the elements you need.

```{r}
Obj3 <- list(Obj1, Second = Obj2)
str(Obj3)
```

### Data Frame Type

We already mentioned that the list type doesn't depend on the size of the elements. However, when conducting data analysis, it's often in a format similar to a two-dimensional spreadsheet. That is, one row corresponds to one observation, and each column represents a variable. This kind of rectangular list, that can assign variable names to columns, is called a **data frame type**. Below is an example of such an object.

```{r}
df <- data.frame(
  name = c("Ishino", "Pierre", "Marin"),
  origin = c("Shizuoka", "Shizuoka", "Hokkaido"),
  height = c(170, 180, 160),
  salary = c(1000, 20, 800)
)
# 内容を表示させる
df
# 構造を確認する
str(df)
```

By the way, you may have learned about Stevens' levels of measurement in the basics of psychological statistics [@stevens1946]. There, numerical values are classified into four stages: nominal, ordinal, interval, and ratio scale levels based on the level of operation allowed for their values. For numbers at the interval and ratio scale levels, mathematical calculations can be applied. However, such calculations are not permissible for numbers at the ordinal and nominal scale levels (ex. Even if the second and third favorite persons come together, they can't match the most favorite person).

R has numerical types that correspond to these measurement levels. Since interval and ratio scale levels are calculable, the `numeric` type is appropriate. However, nominal scale levels are referred to as `factor` types (also known as factor or group types), while ordinal scale levels are called `ordered.factor` types.

Here's an example of a factor-type variable. The `as.factor` function can be used to convert information already entered as a character type into a factor type.

```{r}
df$origin <- as.factor(df$origin)
df$origin
```

As can be seen by displaying the elements, there are three values: 'Shizuoka', 'Shizuoka', and 'Hokkaido', but there are only two levels (or categories): 'Shizuoka' and 'Hokkaido'. Storing these as a factor type allows for easy use as categories.

The following is an example of an ordered factor type variable.
```{r}
# 順序付き要因型の例
ratings <- factor(c("低い", "高い", "中程度", "高い", "低い"),
  levels = c("低い", "中程度", "高い"),
  ordered = TRUE
)
# ratingsの内容と型を確認
print(ratings)
```

During tabulation and the like, usage may be limited since it doesn't differ from the factor type. However, as R provides specific behaviours to coincide with the level of measurement when applying statistical models, it would be wise to carefully set the level of measurement for your data.

Access to elements of a dataframe is typically done through variable names. For instance, if you want to perform statistical processing on the numeric variables of the recently mentioned object `df`, you would do something like this.

```{r}
mean(df$height)
sum(df$salary)
```

Additionally, there are functions that can summarize dataframe objects in bulk.

```{r}
summary(df)
```

## Importing External Files

In actual analysis, you would generally not input the datasets by hand. Instead, you would typically extract them from a database or load them from a separate file.

Many statistical packages have their own file formats, and R provides corresponding reading functions for each. However, here we will demonstrate how to load data from the most basic format - the CSV format.

Let's consider loading the provided sample data, `Baseball.csv`. Note that this data is saved in UTF-8 format[^2.2]. To load this, we can utilize the `read.csv` function which R provides by default.

```{r}
dat <- read.csv("Baseball.csv")
head(dat)
str(dat)
```

In this case, the `head` function is used to display the introductory part (by default, the first six rows) of objects such as data frames. Also, as apparent from the results of the `str` function, the loaded file automatically becomes a data frame type.

By the way, the letters `NA` are inserted in the sample data where there is missing information. The `read.csv` function treats missing values as the string "NA" by default. However, in reality, it might be a different character (for example, a period) or a specific value (like 9999). In such cases, you can use the `na.strings` option to specify the value to be treated as missing.

## Bonus: Clean Up Your Script

So, having written scripts up to this point, you should now have a fairly substantial script file.
Of course, the method of "if it works, it's fine" can be applied when writing scripts. However, it would be even better if it's beautifully written. There may be different interpretations of what "beautiful" means but generally, there's a method of presenting code neatly, referred to as "Code Convention". We won't get into too much detail here, but let's try running 'Reformat Code' from the Code menu in RStudio. Does your script file appear to be neatly organized?

Beautiful code aids in debugging as well. Always make it a point to write and reformat your code occasionally.

## Assignment

+ Start up R and create a new script file. Within that file, declare two integers, perform the addition, and display the result in the console.

Please write the following calculation in the script and execute it.
    + $\frac{5}{6} + \frac{1}{3}$
This Japanese sentence is requesting the calculation of an equation: 

    + $9.6 \div 4$

The English translation would be: 

    + "Calculate 9.6 divided by 4."
    + $2.3 + \frac{1}{2}$

Unfortunately, there's no Japanese text provided to translate. The attached code seems to be LaTeX, a typesetting system commonly used in academia to write scientific documents, and it is not language-specific. It represents a mathematical expression, which reads as "+ 2.3 + 1/2" in English.
    + $3 \times (2.2 + \frac{4}{5})$
    + $(-2)^4$

Since the assistant did not provide any Japanese text to translate, I cannot provide a translation.
    + $2\sqrt{2} \times \sqrt{3}$

Since you did not provide text in Japanese to translate, I can only ensure correctness of the provided mathematical expression, typically used in the context of understanding basic algebra and statistics in R and RStudio. It signifies "2 multiplied by the square root of 2, times the square root of 3".
    + $2\log_e 25$

is translated as 

    + "Two times the natural logarithm of 25"

In your R script file, please create a vector. The vector should contain integers from 1 to 10. After that, calculate the sum and average of the elements in the vector. The function to sum the vector is `sum`, and for the average it is `mean`.

Please convert the following table into a list-type object `Tbl`.



| Name    | Pop  | Area   | Density |
|:--------|------:|-------:|--------:|

(Apologies, but there seems to be a misunderstanding. The Japanese text needed for translation is not provided here. Please provide the text you'd like to be translated.)
| Tokyo   | 1,403 |  2,194 |  6,397  |

I'm sorry, but your previous message does not contain any Japanese text to be translated. Please provide Japanese academic text for translation.
I'm afraid the text you provided for translation seems to be a table rather than Japanese text. Could you please provide a Japanese text that you'd like to be translated into English?
Sorry, but there seems to be a mistake. A table has been provided instead of the Japanese text. Please provide the correct Japanese text that needs translation for me to assist you better.

+ Please display the value of Tokyo's area ("Area") from the `Tbl` object you just created (accessing list elements).

+ Please calculate the mean of the population (Pop) variable in the `Tbl` object.

+ Please convert the `Tbl` object into a dataframe-type object `df2`. You are free to reconstruct it, or you can use the `as.data.frame` function.

Please load the `Baseball2022.csv` file using your R script and store it in the `dat` dataframe. Please note that missing values in this file are represented by the number $999$.

Please try displaying the first 10 lines of the loaded `dat`.

Please apply the `summary` function to the loaded `dat`.

+ The variable `team` in this dataset is at nominal scale level. Please convert it to Factor type. There are also two more variables that should be converted to Factor type. Please change their type in the same way.

In this dataset, for the numerical data among the variables, we will compute the mean, variance, standard deviation, maximum value, minimum value, and median.
Please calculate each one.

+ Please format the script file that outlines the tasks using Reformat, etc.

[^2.2]: UTF-8 is a type of character encoding that translates data composed of 0s and 1s into human language. It is the most commonly used character encoding worldwide. However, Windows OS still uses Shift-JIS, a local character encoding, as the default. Consequently, if this file is opened once in Excel on a Windows machine, character corruption frequently occurs, preventing the following procedures from working correctly. When using this in this course, it is recommended to load the file directly into R without opening it in Excel or similar after downloading.


