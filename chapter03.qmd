# Rによるデータハンドリング

心理学を始め，データを扱うサイエンスでは，データ収集の計画，実行と，データに基づいた解析結果，それを踏まえてのコミュニケーションとの間に，「データをわかりやすい形に加工し，可視化し，分析する」という手順がある。このデータの加工を**データハンドリング**という。統計といえば「分析」に注目されがちだが，実際にはデータハンドリングと可視化のステップが最も時間を必要とし，重要なプロセスである。

## tidyverseの導入

本講義では`tidyverse`をつかったデータハンドリングを扱う。`tidyverse`は，データに対する統一的な設計方針を表す概念でもあり，具体的にはそれを実装したパッケージ名でもある。まずは`tidyverse`パッケージをインストール(ダウンロード)し，次のコードでRに読み込んでおく。

```{r}
library(tidyverse)
```

Attaching core tidyverse packages,と表示され，複数のパッケージ名にチェックマークが入っていたものが表示されただろう。`tidyverse`パッケージはこれらの下位パッケージを含むパッケージ群である。これに含まれる`dplyr`,`tidyr`パッケージはデータの整形に，`readr`はファイルの読み込みに，`forecats`はFactor型変数の操作に，`stringr`は文字型変数の操作に，`lubridate`は日付型変数の操作に，`tibble`はデータフレーム型オブジェクトの操作に，`purrr`はデータに適用する関数に，`ggplot2`は可視化に特化したパッケージである。

続いてConflictsについての言及がある。`tidyverse`パッケージに限らず，パッケージを読み込むと表示されることのあるこの警告は，「関数名の衝突」を意味している。ここまで，Rを起動するだけで，`sqrt`,`mean`などの関数が利用できた。これはRの基本関数であるが，具体的には`base`パッケージに含まれた関数である。Rは起動時に`base`などいくつかのパッケージを自動的に読み込んでいるのである。これに別途パッケージを読み込むとき，あとで読み込まれたパッケージが同名の関数を使っていることがある。このとき，関数名は後から読み込んだもので上書きされる。そのことについての警告が表示されているのである。具体的にみると，`dplyr::filter() masks stats::filter()`とあるのは，最初に読み込んでいた`stats`パッケージの`filter`関数は，(`tidyverse`パッケージに含まれる)`dplyr`パッケージのもつ同名の関数で上書きされ，今後はこちらが優先的に利用されるよ，ということを示している。

このような同音異字関数は，関数を特定するときに混乱を招くかもしれない。あるパッケージの関数であることを明示したい場合は，この警告文にあるように，パッケージ名`::`関数名，という書き方にすると良い。

## パイプ演算子

続いてパイプ演算子について解説する。パイプ演算子は`tidyverse`パッケージに含まれていた`magrittr`パッケージで導入されたもので，これによってデータハンドリングの利便性が一気に向上した。そこでRもver 4.2からこの演算子を導入し，特段パッケージのインストールを必要としなくとも使えるようになった。このR本体のパイプ演算子のことを，`tidyverse`のそれと区別して，ナイーブパイプと呼ぶこともある。

ともあれこのパイプ演算子がいかに優れたものであるかを解説しよう。次のスクリプトは，あるデータセットの標準偏差を計算するものである[^1]。数式で表現すると次の通り。ここで$\bar{x}$はデータベクトル$x$の算術平均。
$$v = \sqrt{\frac{1}{n}\sum_{i=1}^n (x_i - \bar{x})^2}$$


[^1]: もちろん`sd(dat)` の一行で済む話だが，ここでは説明のために各ステップを書き下している。もっとも，`sd`関数で計算されるのは$n-1$で割った不偏分散の平方根であり，標本標準偏差とは異なるものである。

```{r}
dat <- c(10,13,15,12,14) # データ
M <- mean(dat)           # 平均
dev <- dat - M           # 平均偏差
pow <- dev^2             # 平均偏差の2乗
variance <- mean(pow)    # 平均偏差の2乗の平均が分散
standardDev <- sqrt(variance) # 分散の正の平方根が標準偏差
```


ここでは，標準偏差オブジェクト`standardDev`を作るまでに平均オブジェクト`M`，平均偏差ベクトル`dev`，その2乗したもの`pow`，分散`variance`と4つものオブジェクトを作って答えに到達している。また，作られるオブジェクトが左側にあり，その右側にどのような演算をしているかが記述されているため，頭の中では「オブジェクトを作る，次の計算で」と読んでいったことだろう。

パイプ演算子はこの思考の流れをそのまま具現化する。パイプ演算子は`%>%`と書き，左側の演算結果をパイプ演算子の右側に来る関数の第一引数として右側に渡す役目をする。これを踏まえて上のスクリプトを書き直してみよう。ちなみにパイプ演算子はショートカット`Ctrl(Cmd)+Shift+M`で入力できる。

```{r}
dat <- c(10,13,15,12,14) 
standardDev <- dat %>%
  { . - mean(.) } %>%
  { .^2 } %>%
  mean() %>%
  sqrt()
```

ここでピリオド(`.`)は，前の関数から引き継いだもの(プレイスホルダー)であり，二行目は`{dat - mean(dat)}`，すなわち平均偏差の計算を意味している。それを次のパイプで二乗し，平均し，平方根を取っている。平均や平方根を取るときにプレイスホルダーが明示されていないのは，引き受けた引数がどこに入るかが明らかなので省略しているからである。

この例に見るように，パイプ演算子を使うと，データ$\to$平均偏差$\to$2乗$\to$平均$\to$平方根，という計算の流れと，スクリプトの流れが一致しているため，理解しやすくなったのではないだろうか。

また，ここでの計算は，次のように書くこともできる。

```{r}
standardDev <- sqrt(mean((dat- mean(dat))^2))
```

この書き方は，関数の中に関数がある入れ子状態になっており，$y = h(g(f(x)))$のような形式である。これも対応するカッコの内側から読み解いていく必要があり，思考の流れと逆転しているため理解が難しい。パイプ演算子を使うと，`x %>% f() %>% g() %>% h() -> y`のように記述できるため，苦労せずに読むことができる。

以下はこのパイプ演算子を使った記述で進めていくので，この表記法(およびショートカット)に慣れていこう。

## 課題1

+ `sqrt`,`mean`関数が`base`パッケージに含まれることをヘルプで確認してみよう。どこを見れば良いだろうか?`filter`,`lag`関数はどうだろうか?
+ `tidyverse`パッケージを読み込んだことで，`filter`関数は`dplyr`パッケージのものが優先されることになった。`dplyr`パッケージの`filter`関数をヘルプで見てみよう。
+ 上書きされる前の`stats`パッケージの`filter`関数に関するヘルプを見てみよう。
+ 先ほどのデータを使って，平均値絶対偏差(MeanAD)および中央絶対偏差(MAD)をパイプ演算子を使って算出してみよう。なお平均値絶対偏差，中央値絶対偏差は次のように定義される。また絶対値を計算するR関数は`abs`である。

$$MeanAD = \frac{1}{n}\sum_{i=1}^n|x_i - \bar{x}|$$
$$MAD = median(|x_1-median(x)|,\cdots,|x_n-median(x)|)$$

## 行選択と列選択
## 変数を作る・再割り当てする
## ロング型とワイド型
## データの結合
## データ整形課題
